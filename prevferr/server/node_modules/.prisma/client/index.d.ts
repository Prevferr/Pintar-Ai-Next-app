
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Researcher
 * 
 */
export type Researcher = $Result.DefaultSelection<Prisma.$ResearcherPayload>
/**
 * Model Investor
 * 
 */
export type Investor = $Result.DefaultSelection<Prisma.$InvestorPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Jurnal
 * 
 */
export type Jurnal = $Result.DefaultSelection<Prisma.$JurnalPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Researchers
 * const researchers = await prisma.researcher.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Researchers
   * const researchers = await prisma.researcher.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.researcher`: Exposes CRUD operations for the **Researcher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Researchers
    * const researchers = await prisma.researcher.findMany()
    * ```
    */
  get researcher(): Prisma.ResearcherDelegate<ExtArgs>;

  /**
   * `prisma.investor`: Exposes CRUD operations for the **Investor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Investors
    * const investors = await prisma.investor.findMany()
    * ```
    */
  get investor(): Prisma.InvestorDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs>;

  /**
   * `prisma.jurnal`: Exposes CRUD operations for the **Jurnal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jurnals
    * const jurnals = await prisma.jurnal.findMany()
    * ```
    */
  get jurnal(): Prisma.JurnalDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.0
   * Query Engine version: 0a83d8541752d7582de2ebc1ece46519ce72a848
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Researcher: 'Researcher',
    Investor: 'Investor',
    Comment: 'Comment',
    Project: 'Project',
    Payment: 'Payment',
    Jurnal: 'Jurnal'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'researcher' | 'investor' | 'comment' | 'project' | 'payment' | 'jurnal'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Researcher: {
        payload: Prisma.$ResearcherPayload<ExtArgs>
        fields: Prisma.ResearcherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResearcherFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearcherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResearcherFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearcherPayload>
          }
          findFirst: {
            args: Prisma.ResearcherFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearcherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResearcherFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearcherPayload>
          }
          findMany: {
            args: Prisma.ResearcherFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearcherPayload>[]
          }
          create: {
            args: Prisma.ResearcherCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearcherPayload>
          }
          createMany: {
            args: Prisma.ResearcherCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ResearcherDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearcherPayload>
          }
          update: {
            args: Prisma.ResearcherUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearcherPayload>
          }
          deleteMany: {
            args: Prisma.ResearcherDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ResearcherUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ResearcherUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearcherPayload>
          }
          aggregate: {
            args: Prisma.ResearcherAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResearcher>
          }
          groupBy: {
            args: Prisma.ResearcherGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResearcherGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResearcherCountArgs<ExtArgs>,
            result: $Utils.Optional<ResearcherCountAggregateOutputType> | number
          }
        }
      }
      Investor: {
        payload: Prisma.$InvestorPayload<ExtArgs>
        fields: Prisma.InvestorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvestorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvestorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          findFirst: {
            args: Prisma.InvestorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvestorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          findMany: {
            args: Prisma.InvestorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>[]
          }
          create: {
            args: Prisma.InvestorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          createMany: {
            args: Prisma.InvestorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvestorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          update: {
            args: Prisma.InvestorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          deleteMany: {
            args: Prisma.InvestorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvestorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvestorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          aggregate: {
            args: Prisma.InvestorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvestor>
          }
          groupBy: {
            args: Prisma.InvestorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvestorGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvestorCountArgs<ExtArgs>,
            result: $Utils.Optional<InvestorCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>,
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Jurnal: {
        payload: Prisma.$JurnalPayload<ExtArgs>
        fields: Prisma.JurnalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JurnalFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JurnalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JurnalFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JurnalPayload>
          }
          findFirst: {
            args: Prisma.JurnalFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JurnalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JurnalFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JurnalPayload>
          }
          findMany: {
            args: Prisma.JurnalFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JurnalPayload>[]
          }
          create: {
            args: Prisma.JurnalCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JurnalPayload>
          }
          createMany: {
            args: Prisma.JurnalCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.JurnalDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JurnalPayload>
          }
          update: {
            args: Prisma.JurnalUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JurnalPayload>
          }
          deleteMany: {
            args: Prisma.JurnalDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.JurnalUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.JurnalUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JurnalPayload>
          }
          aggregate: {
            args: Prisma.JurnalAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJurnal>
          }
          groupBy: {
            args: Prisma.JurnalGroupByArgs<ExtArgs>,
            result: $Utils.Optional<JurnalGroupByOutputType>[]
          }
          count: {
            args: Prisma.JurnalCountArgs<ExtArgs>,
            result: $Utils.Optional<JurnalCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ResearcherCountOutputType
   */

  export type ResearcherCountOutputType = {
    portofolio: number
    Comment: number
    Project: number
  }

  export type ResearcherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portofolio?: boolean | ResearcherCountOutputTypeCountPortofolioArgs
    Comment?: boolean | ResearcherCountOutputTypeCountCommentArgs
    Project?: boolean | ResearcherCountOutputTypeCountProjectArgs
  }

  // Custom InputTypes

  /**
   * ResearcherCountOutputType without action
   */
  export type ResearcherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherCountOutputType
     */
    select?: ResearcherCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ResearcherCountOutputType without action
   */
  export type ResearcherCountOutputTypeCountPortofolioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JurnalWhereInput
  }


  /**
   * ResearcherCountOutputType without action
   */
  export type ResearcherCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * ResearcherCountOutputType without action
   */
  export type ResearcherCountOutputTypeCountProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }



  /**
   * Count Type InvestorCountOutputType
   */

  export type InvestorCountOutputType = {
    Comment: number
    Project: number
    payment: number
  }

  export type InvestorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Comment?: boolean | InvestorCountOutputTypeCountCommentArgs
    Project?: boolean | InvestorCountOutputTypeCountProjectArgs
    payment?: boolean | InvestorCountOutputTypeCountPaymentArgs
  }

  // Custom InputTypes

  /**
   * InvestorCountOutputType without action
   */
  export type InvestorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestorCountOutputType
     */
    select?: InvestorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * InvestorCountOutputType without action
   */
  export type InvestorCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * InvestorCountOutputType without action
   */
  export type InvestorCountOutputTypeCountProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * InvestorCountOutputType without action
   */
  export type InvestorCountOutputTypeCountPaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }



  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    Project: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Project?: boolean | CommentCountOutputTypeCountProjectArgs
  }

  // Custom InputTypes

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }



  /**
   * Count Type JurnalCountOutputType
   */

  export type JurnalCountOutputType = {
    portofolio: number
  }

  export type JurnalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portofolio?: boolean | JurnalCountOutputTypeCountPortofolioArgs
  }

  // Custom InputTypes

  /**
   * JurnalCountOutputType without action
   */
  export type JurnalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JurnalCountOutputType
     */
    select?: JurnalCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * JurnalCountOutputType without action
   */
  export type JurnalCountOutputTypeCountPortofolioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResearcherWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Researcher
   */

  export type AggregateResearcher = {
    _count: ResearcherCountAggregateOutputType | null
    _avg: ResearcherAvgAggregateOutputType | null
    _sum: ResearcherSumAggregateOutputType | null
    _min: ResearcherMinAggregateOutputType | null
    _max: ResearcherMaxAggregateOutputType | null
  }

  export type ResearcherAvgAggregateOutputType = {
    id: number | null
  }

  export type ResearcherSumAggregateOutputType = {
    id: number | null
  }

  export type ResearcherMinAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    education: string | null
    scope: string | null
    research: string | null
    institution: string | null
    profileImage: string | null
    email: string | null
    password: string | null
    background: string | null
    gender: string | null
    role: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResearcherMaxAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    education: string | null
    scope: string | null
    research: string | null
    institution: string | null
    profileImage: string | null
    email: string | null
    password: string | null
    background: string | null
    gender: string | null
    role: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResearcherCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    education: number
    scope: number
    research: number
    institution: number
    profileImage: number
    email: number
    password: number
    background: number
    gender: number
    role: number
    location: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ResearcherAvgAggregateInputType = {
    id?: true
  }

  export type ResearcherSumAggregateInputType = {
    id?: true
  }

  export type ResearcherMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    education?: true
    scope?: true
    research?: true
    institution?: true
    profileImage?: true
    email?: true
    password?: true
    background?: true
    gender?: true
    role?: true
    location?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResearcherMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    education?: true
    scope?: true
    research?: true
    institution?: true
    profileImage?: true
    email?: true
    password?: true
    background?: true
    gender?: true
    role?: true
    location?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResearcherCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    education?: true
    scope?: true
    research?: true
    institution?: true
    profileImage?: true
    email?: true
    password?: true
    background?: true
    gender?: true
    role?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ResearcherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Researcher to aggregate.
     */
    where?: ResearcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Researchers to fetch.
     */
    orderBy?: ResearcherOrderByWithRelationInput | ResearcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResearcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Researchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Researchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Researchers
    **/
    _count?: true | ResearcherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResearcherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResearcherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResearcherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResearcherMaxAggregateInputType
  }

  export type GetResearcherAggregateType<T extends ResearcherAggregateArgs> = {
        [P in keyof T & keyof AggregateResearcher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResearcher[P]>
      : GetScalarType<T[P], AggregateResearcher[P]>
  }




  export type ResearcherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResearcherWhereInput
    orderBy?: ResearcherOrderByWithAggregationInput | ResearcherOrderByWithAggregationInput[]
    by: ResearcherScalarFieldEnum[] | ResearcherScalarFieldEnum
    having?: ResearcherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResearcherCountAggregateInputType | true
    _avg?: ResearcherAvgAggregateInputType
    _sum?: ResearcherSumAggregateInputType
    _min?: ResearcherMinAggregateInputType
    _max?: ResearcherMaxAggregateInputType
  }

  export type ResearcherGroupByOutputType = {
    id: number
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt: Date
    updatedAt: Date
    _count: ResearcherCountAggregateOutputType | null
    _avg: ResearcherAvgAggregateOutputType | null
    _sum: ResearcherSumAggregateOutputType | null
    _min: ResearcherMinAggregateOutputType | null
    _max: ResearcherMaxAggregateOutputType | null
  }

  type GetResearcherGroupByPayload<T extends ResearcherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResearcherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResearcherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResearcherGroupByOutputType[P]>
            : GetScalarType<T[P], ResearcherGroupByOutputType[P]>
        }
      >
    >


  export type ResearcherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    education?: boolean
    scope?: boolean
    research?: boolean
    institution?: boolean
    profileImage?: boolean
    email?: boolean
    password?: boolean
    background?: boolean
    gender?: boolean
    role?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    portofolio?: boolean | Researcher$portofolioArgs<ExtArgs>
    Comment?: boolean | Researcher$CommentArgs<ExtArgs>
    Project?: boolean | Researcher$ProjectArgs<ExtArgs>
    _count?: boolean | ResearcherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["researcher"]>

  export type ResearcherSelectScalar = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    education?: boolean
    scope?: boolean
    research?: boolean
    institution?: boolean
    profileImage?: boolean
    email?: boolean
    password?: boolean
    background?: boolean
    gender?: boolean
    role?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ResearcherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portofolio?: boolean | Researcher$portofolioArgs<ExtArgs>
    Comment?: boolean | Researcher$CommentArgs<ExtArgs>
    Project?: boolean | Researcher$ProjectArgs<ExtArgs>
    _count?: boolean | ResearcherCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ResearcherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Researcher"
    objects: {
      portofolio: Prisma.$JurnalPayload<ExtArgs>[]
      Comment: Prisma.$CommentPayload<ExtArgs>[]
      Project: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstname: string
      lastname: string
      education: string
      scope: string
      research: string
      institution: string
      profileImage: string
      email: string
      password: string
      background: string
      gender: string
      role: string
      location: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["researcher"]>
    composites: {}
  }


  type ResearcherGetPayload<S extends boolean | null | undefined | ResearcherDefaultArgs> = $Result.GetResult<Prisma.$ResearcherPayload, S>

  type ResearcherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResearcherFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResearcherCountAggregateInputType | true
    }

  export interface ResearcherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Researcher'], meta: { name: 'Researcher' } }
    /**
     * Find zero or one Researcher that matches the filter.
     * @param {ResearcherFindUniqueArgs} args - Arguments to find a Researcher
     * @example
     * // Get one Researcher
     * const researcher = await prisma.researcher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResearcherFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ResearcherFindUniqueArgs<ExtArgs>>
    ): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Researcher that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResearcherFindUniqueOrThrowArgs} args - Arguments to find a Researcher
     * @example
     * // Get one Researcher
     * const researcher = await prisma.researcher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResearcherFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearcherFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Researcher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherFindFirstArgs} args - Arguments to find a Researcher
     * @example
     * // Get one Researcher
     * const researcher = await prisma.researcher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResearcherFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearcherFindFirstArgs<ExtArgs>>
    ): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Researcher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherFindFirstOrThrowArgs} args - Arguments to find a Researcher
     * @example
     * // Get one Researcher
     * const researcher = await prisma.researcher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResearcherFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearcherFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Researchers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Researchers
     * const researchers = await prisma.researcher.findMany()
     * 
     * // Get first 10 Researchers
     * const researchers = await prisma.researcher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const researcherWithIdOnly = await prisma.researcher.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResearcherFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearcherFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Researcher.
     * @param {ResearcherCreateArgs} args - Arguments to create a Researcher.
     * @example
     * // Create one Researcher
     * const Researcher = await prisma.researcher.create({
     *   data: {
     *     // ... data to create a Researcher
     *   }
     * })
     * 
    **/
    create<T extends ResearcherCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ResearcherCreateArgs<ExtArgs>>
    ): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Researchers.
     *     @param {ResearcherCreateManyArgs} args - Arguments to create many Researchers.
     *     @example
     *     // Create many Researchers
     *     const researcher = await prisma.researcher.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResearcherCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearcherCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Researcher.
     * @param {ResearcherDeleteArgs} args - Arguments to delete one Researcher.
     * @example
     * // Delete one Researcher
     * const Researcher = await prisma.researcher.delete({
     *   where: {
     *     // ... filter to delete one Researcher
     *   }
     * })
     * 
    **/
    delete<T extends ResearcherDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ResearcherDeleteArgs<ExtArgs>>
    ): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Researcher.
     * @param {ResearcherUpdateArgs} args - Arguments to update one Researcher.
     * @example
     * // Update one Researcher
     * const researcher = await prisma.researcher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResearcherUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ResearcherUpdateArgs<ExtArgs>>
    ): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Researchers.
     * @param {ResearcherDeleteManyArgs} args - Arguments to filter Researchers to delete.
     * @example
     * // Delete a few Researchers
     * const { count } = await prisma.researcher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResearcherDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearcherDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Researchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Researchers
     * const researcher = await prisma.researcher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResearcherUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ResearcherUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Researcher.
     * @param {ResearcherUpsertArgs} args - Arguments to update or create a Researcher.
     * @example
     * // Update or create a Researcher
     * const researcher = await prisma.researcher.upsert({
     *   create: {
     *     // ... data to create a Researcher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Researcher we want to update
     *   }
     * })
    **/
    upsert<T extends ResearcherUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ResearcherUpsertArgs<ExtArgs>>
    ): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Researchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherCountArgs} args - Arguments to filter Researchers to count.
     * @example
     * // Count the number of Researchers
     * const count = await prisma.researcher.count({
     *   where: {
     *     // ... the filter for the Researchers we want to count
     *   }
     * })
    **/
    count<T extends ResearcherCountArgs>(
      args?: Subset<T, ResearcherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResearcherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Researcher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResearcherAggregateArgs>(args: Subset<T, ResearcherAggregateArgs>): Prisma.PrismaPromise<GetResearcherAggregateType<T>>

    /**
     * Group by Researcher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResearcherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResearcherGroupByArgs['orderBy'] }
        : { orderBy?: ResearcherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResearcherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResearcherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Researcher model
   */
  readonly fields: ResearcherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Researcher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResearcherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    portofolio<T extends Researcher$portofolioArgs<ExtArgs> = {}>(args?: Subset<T, Researcher$portofolioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'findMany'> | Null>;

    Comment<T extends Researcher$CommentArgs<ExtArgs> = {}>(args?: Subset<T, Researcher$CommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    Project<T extends Researcher$ProjectArgs<ExtArgs> = {}>(args?: Subset<T, Researcher$ProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Researcher model
   */ 
  interface ResearcherFieldRefs {
    readonly id: FieldRef<"Researcher", 'Int'>
    readonly firstname: FieldRef<"Researcher", 'String'>
    readonly lastname: FieldRef<"Researcher", 'String'>
    readonly education: FieldRef<"Researcher", 'String'>
    readonly scope: FieldRef<"Researcher", 'String'>
    readonly research: FieldRef<"Researcher", 'String'>
    readonly institution: FieldRef<"Researcher", 'String'>
    readonly profileImage: FieldRef<"Researcher", 'String'>
    readonly email: FieldRef<"Researcher", 'String'>
    readonly password: FieldRef<"Researcher", 'String'>
    readonly background: FieldRef<"Researcher", 'String'>
    readonly gender: FieldRef<"Researcher", 'String'>
    readonly role: FieldRef<"Researcher", 'String'>
    readonly location: FieldRef<"Researcher", 'String'>
    readonly createdAt: FieldRef<"Researcher", 'DateTime'>
    readonly updatedAt: FieldRef<"Researcher", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Researcher findUnique
   */
  export type ResearcherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    /**
     * Filter, which Researcher to fetch.
     */
    where: ResearcherWhereUniqueInput
  }


  /**
   * Researcher findUniqueOrThrow
   */
  export type ResearcherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    /**
     * Filter, which Researcher to fetch.
     */
    where: ResearcherWhereUniqueInput
  }


  /**
   * Researcher findFirst
   */
  export type ResearcherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    /**
     * Filter, which Researcher to fetch.
     */
    where?: ResearcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Researchers to fetch.
     */
    orderBy?: ResearcherOrderByWithRelationInput | ResearcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Researchers.
     */
    cursor?: ResearcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Researchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Researchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Researchers.
     */
    distinct?: ResearcherScalarFieldEnum | ResearcherScalarFieldEnum[]
  }


  /**
   * Researcher findFirstOrThrow
   */
  export type ResearcherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    /**
     * Filter, which Researcher to fetch.
     */
    where?: ResearcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Researchers to fetch.
     */
    orderBy?: ResearcherOrderByWithRelationInput | ResearcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Researchers.
     */
    cursor?: ResearcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Researchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Researchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Researchers.
     */
    distinct?: ResearcherScalarFieldEnum | ResearcherScalarFieldEnum[]
  }


  /**
   * Researcher findMany
   */
  export type ResearcherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    /**
     * Filter, which Researchers to fetch.
     */
    where?: ResearcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Researchers to fetch.
     */
    orderBy?: ResearcherOrderByWithRelationInput | ResearcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Researchers.
     */
    cursor?: ResearcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Researchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Researchers.
     */
    skip?: number
    distinct?: ResearcherScalarFieldEnum | ResearcherScalarFieldEnum[]
  }


  /**
   * Researcher create
   */
  export type ResearcherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    /**
     * The data needed to create a Researcher.
     */
    data: XOR<ResearcherCreateInput, ResearcherUncheckedCreateInput>
  }


  /**
   * Researcher createMany
   */
  export type ResearcherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Researchers.
     */
    data: ResearcherCreateManyInput | ResearcherCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Researcher update
   */
  export type ResearcherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    /**
     * The data needed to update a Researcher.
     */
    data: XOR<ResearcherUpdateInput, ResearcherUncheckedUpdateInput>
    /**
     * Choose, which Researcher to update.
     */
    where: ResearcherWhereUniqueInput
  }


  /**
   * Researcher updateMany
   */
  export type ResearcherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Researchers.
     */
    data: XOR<ResearcherUpdateManyMutationInput, ResearcherUncheckedUpdateManyInput>
    /**
     * Filter which Researchers to update
     */
    where?: ResearcherWhereInput
  }


  /**
   * Researcher upsert
   */
  export type ResearcherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    /**
     * The filter to search for the Researcher to update in case it exists.
     */
    where: ResearcherWhereUniqueInput
    /**
     * In case the Researcher found by the `where` argument doesn't exist, create a new Researcher with this data.
     */
    create: XOR<ResearcherCreateInput, ResearcherUncheckedCreateInput>
    /**
     * In case the Researcher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResearcherUpdateInput, ResearcherUncheckedUpdateInput>
  }


  /**
   * Researcher delete
   */
  export type ResearcherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    /**
     * Filter which Researcher to delete.
     */
    where: ResearcherWhereUniqueInput
  }


  /**
   * Researcher deleteMany
   */
  export type ResearcherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Researchers to delete
     */
    where?: ResearcherWhereInput
  }


  /**
   * Researcher.portofolio
   */
  export type Researcher$portofolioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    where?: JurnalWhereInput
    orderBy?: JurnalOrderByWithRelationInput | JurnalOrderByWithRelationInput[]
    cursor?: JurnalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JurnalScalarFieldEnum | JurnalScalarFieldEnum[]
  }


  /**
   * Researcher.Comment
   */
  export type Researcher$CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Researcher.Project
   */
  export type Researcher$ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Researcher without action
   */
  export type ResearcherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
  }



  /**
   * Model Investor
   */

  export type AggregateInvestor = {
    _count: InvestorCountAggregateOutputType | null
    _avg: InvestorAvgAggregateOutputType | null
    _sum: InvestorSumAggregateOutputType | null
    _min: InvestorMinAggregateOutputType | null
    _max: InvestorMaxAggregateOutputType | null
  }

  export type InvestorAvgAggregateOutputType = {
    id: number | null
    budget: number | null
  }

  export type InvestorSumAggregateOutputType = {
    id: number | null
    budget: number | null
  }

  export type InvestorMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstname: string | null
    lastname: string | null
    budget: number | null
    profileImage: string | null
    institution: string | null
    range_member: string | null
    industry: string | null
    industry_type: string | null
    isPremium: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvestorMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstname: string | null
    lastname: string | null
    budget: number | null
    profileImage: string | null
    institution: string | null
    range_member: string | null
    industry: string | null
    industry_type: string | null
    isPremium: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvestorCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstname: number
    lastname: number
    budget: number
    profileImage: number
    institution: number
    range_member: number
    industry: number
    industry_type: number
    isPremium: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InvestorAvgAggregateInputType = {
    id?: true
    budget?: true
  }

  export type InvestorSumAggregateInputType = {
    id?: true
    budget?: true
  }

  export type InvestorMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstname?: true
    lastname?: true
    budget?: true
    profileImage?: true
    institution?: true
    range_member?: true
    industry?: true
    industry_type?: true
    isPremium?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvestorMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstname?: true
    lastname?: true
    budget?: true
    profileImage?: true
    institution?: true
    range_member?: true
    industry?: true
    industry_type?: true
    isPremium?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvestorCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstname?: true
    lastname?: true
    budget?: true
    profileImage?: true
    institution?: true
    range_member?: true
    industry?: true
    industry_type?: true
    isPremium?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InvestorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Investor to aggregate.
     */
    where?: InvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investors to fetch.
     */
    orderBy?: InvestorOrderByWithRelationInput | InvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Investors
    **/
    _count?: true | InvestorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvestorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvestorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvestorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvestorMaxAggregateInputType
  }

  export type GetInvestorAggregateType<T extends InvestorAggregateArgs> = {
        [P in keyof T & keyof AggregateInvestor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvestor[P]>
      : GetScalarType<T[P], AggregateInvestor[P]>
  }




  export type InvestorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvestorWhereInput
    orderBy?: InvestorOrderByWithAggregationInput | InvestorOrderByWithAggregationInput[]
    by: InvestorScalarFieldEnum[] | InvestorScalarFieldEnum
    having?: InvestorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvestorCountAggregateInputType | true
    _avg?: InvestorAvgAggregateInputType
    _sum?: InvestorSumAggregateInputType
    _min?: InvestorMinAggregateInputType
    _max?: InvestorMaxAggregateInputType
  }

  export type InvestorGroupByOutputType = {
    id: number
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt: Date
    updatedAt: Date
    _count: InvestorCountAggregateOutputType | null
    _avg: InvestorAvgAggregateOutputType | null
    _sum: InvestorSumAggregateOutputType | null
    _min: InvestorMinAggregateOutputType | null
    _max: InvestorMaxAggregateOutputType | null
  }

  type GetInvestorGroupByPayload<T extends InvestorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvestorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvestorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvestorGroupByOutputType[P]>
            : GetScalarType<T[P], InvestorGroupByOutputType[P]>
        }
      >
    >


  export type InvestorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstname?: boolean
    lastname?: boolean
    budget?: boolean
    profileImage?: boolean
    institution?: boolean
    range_member?: boolean
    industry?: boolean
    industry_type?: boolean
    isPremium?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Comment?: boolean | Investor$CommentArgs<ExtArgs>
    Project?: boolean | Investor$ProjectArgs<ExtArgs>
    payment?: boolean | Investor$paymentArgs<ExtArgs>
    _count?: boolean | InvestorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["investor"]>

  export type InvestorSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstname?: boolean
    lastname?: boolean
    budget?: boolean
    profileImage?: boolean
    institution?: boolean
    range_member?: boolean
    industry?: boolean
    industry_type?: boolean
    isPremium?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InvestorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Comment?: boolean | Investor$CommentArgs<ExtArgs>
    Project?: boolean | Investor$ProjectArgs<ExtArgs>
    payment?: boolean | Investor$paymentArgs<ExtArgs>
    _count?: boolean | InvestorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $InvestorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Investor"
    objects: {
      Comment: Prisma.$CommentPayload<ExtArgs>[]
      Project: Prisma.$ProjectPayload<ExtArgs>[]
      payment: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      firstname: string
      lastname: string
      budget: number
      profileImage: string
      institution: string
      range_member: string
      industry: string
      industry_type: string
      isPremium: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["investor"]>
    composites: {}
  }


  type InvestorGetPayload<S extends boolean | null | undefined | InvestorDefaultArgs> = $Result.GetResult<Prisma.$InvestorPayload, S>

  type InvestorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvestorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvestorCountAggregateInputType | true
    }

  export interface InvestorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Investor'], meta: { name: 'Investor' } }
    /**
     * Find zero or one Investor that matches the filter.
     * @param {InvestorFindUniqueArgs} args - Arguments to find a Investor
     * @example
     * // Get one Investor
     * const investor = await prisma.investor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvestorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorFindUniqueArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Investor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvestorFindUniqueOrThrowArgs} args - Arguments to find a Investor
     * @example
     * // Get one Investor
     * const investor = await prisma.investor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvestorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Investor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorFindFirstArgs} args - Arguments to find a Investor
     * @example
     * // Get one Investor
     * const investor = await prisma.investor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvestorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorFindFirstArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Investor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorFindFirstOrThrowArgs} args - Arguments to find a Investor
     * @example
     * // Get one Investor
     * const investor = await prisma.investor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvestorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Investors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Investors
     * const investors = await prisma.investor.findMany()
     * 
     * // Get first 10 Investors
     * const investors = await prisma.investor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const investorWithIdOnly = await prisma.investor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvestorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Investor.
     * @param {InvestorCreateArgs} args - Arguments to create a Investor.
     * @example
     * // Create one Investor
     * const Investor = await prisma.investor.create({
     *   data: {
     *     // ... data to create a Investor
     *   }
     * })
     * 
    **/
    create<T extends InvestorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorCreateArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Investors.
     *     @param {InvestorCreateManyArgs} args - Arguments to create many Investors.
     *     @example
     *     // Create many Investors
     *     const investor = await prisma.investor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvestorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Investor.
     * @param {InvestorDeleteArgs} args - Arguments to delete one Investor.
     * @example
     * // Delete one Investor
     * const Investor = await prisma.investor.delete({
     *   where: {
     *     // ... filter to delete one Investor
     *   }
     * })
     * 
    **/
    delete<T extends InvestorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorDeleteArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Investor.
     * @param {InvestorUpdateArgs} args - Arguments to update one Investor.
     * @example
     * // Update one Investor
     * const investor = await prisma.investor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvestorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorUpdateArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Investors.
     * @param {InvestorDeleteManyArgs} args - Arguments to filter Investors to delete.
     * @example
     * // Delete a few Investors
     * const { count } = await prisma.investor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvestorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Investors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Investors
     * const investor = await prisma.investor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvestorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Investor.
     * @param {InvestorUpsertArgs} args - Arguments to update or create a Investor.
     * @example
     * // Update or create a Investor
     * const investor = await prisma.investor.upsert({
     *   create: {
     *     // ... data to create a Investor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Investor we want to update
     *   }
     * })
    **/
    upsert<T extends InvestorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorUpsertArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Investors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorCountArgs} args - Arguments to filter Investors to count.
     * @example
     * // Count the number of Investors
     * const count = await prisma.investor.count({
     *   where: {
     *     // ... the filter for the Investors we want to count
     *   }
     * })
    **/
    count<T extends InvestorCountArgs>(
      args?: Subset<T, InvestorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvestorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Investor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvestorAggregateArgs>(args: Subset<T, InvestorAggregateArgs>): Prisma.PrismaPromise<GetInvestorAggregateType<T>>

    /**
     * Group by Investor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvestorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvestorGroupByArgs['orderBy'] }
        : { orderBy?: InvestorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvestorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvestorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Investor model
   */
  readonly fields: InvestorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Investor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvestorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Comment<T extends Investor$CommentArgs<ExtArgs> = {}>(args?: Subset<T, Investor$CommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    Project<T extends Investor$ProjectArgs<ExtArgs> = {}>(args?: Subset<T, Investor$ProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    payment<T extends Investor$paymentArgs<ExtArgs> = {}>(args?: Subset<T, Investor$paymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Investor model
   */ 
  interface InvestorFieldRefs {
    readonly id: FieldRef<"Investor", 'Int'>
    readonly email: FieldRef<"Investor", 'String'>
    readonly password: FieldRef<"Investor", 'String'>
    readonly firstname: FieldRef<"Investor", 'String'>
    readonly lastname: FieldRef<"Investor", 'String'>
    readonly budget: FieldRef<"Investor", 'Int'>
    readonly profileImage: FieldRef<"Investor", 'String'>
    readonly institution: FieldRef<"Investor", 'String'>
    readonly range_member: FieldRef<"Investor", 'String'>
    readonly industry: FieldRef<"Investor", 'String'>
    readonly industry_type: FieldRef<"Investor", 'String'>
    readonly isPremium: FieldRef<"Investor", 'Boolean'>
    readonly createdAt: FieldRef<"Investor", 'DateTime'>
    readonly updatedAt: FieldRef<"Investor", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Investor findUnique
   */
  export type InvestorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investor to fetch.
     */
    where: InvestorWhereUniqueInput
  }


  /**
   * Investor findUniqueOrThrow
   */
  export type InvestorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investor to fetch.
     */
    where: InvestorWhereUniqueInput
  }


  /**
   * Investor findFirst
   */
  export type InvestorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investor to fetch.
     */
    where?: InvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investors to fetch.
     */
    orderBy?: InvestorOrderByWithRelationInput | InvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Investors.
     */
    cursor?: InvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Investors.
     */
    distinct?: InvestorScalarFieldEnum | InvestorScalarFieldEnum[]
  }


  /**
   * Investor findFirstOrThrow
   */
  export type InvestorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investor to fetch.
     */
    where?: InvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investors to fetch.
     */
    orderBy?: InvestorOrderByWithRelationInput | InvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Investors.
     */
    cursor?: InvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Investors.
     */
    distinct?: InvestorScalarFieldEnum | InvestorScalarFieldEnum[]
  }


  /**
   * Investor findMany
   */
  export type InvestorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investors to fetch.
     */
    where?: InvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investors to fetch.
     */
    orderBy?: InvestorOrderByWithRelationInput | InvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Investors.
     */
    cursor?: InvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investors.
     */
    skip?: number
    distinct?: InvestorScalarFieldEnum | InvestorScalarFieldEnum[]
  }


  /**
   * Investor create
   */
  export type InvestorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * The data needed to create a Investor.
     */
    data: XOR<InvestorCreateInput, InvestorUncheckedCreateInput>
  }


  /**
   * Investor createMany
   */
  export type InvestorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Investors.
     */
    data: InvestorCreateManyInput | InvestorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Investor update
   */
  export type InvestorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * The data needed to update a Investor.
     */
    data: XOR<InvestorUpdateInput, InvestorUncheckedUpdateInput>
    /**
     * Choose, which Investor to update.
     */
    where: InvestorWhereUniqueInput
  }


  /**
   * Investor updateMany
   */
  export type InvestorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Investors.
     */
    data: XOR<InvestorUpdateManyMutationInput, InvestorUncheckedUpdateManyInput>
    /**
     * Filter which Investors to update
     */
    where?: InvestorWhereInput
  }


  /**
   * Investor upsert
   */
  export type InvestorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * The filter to search for the Investor to update in case it exists.
     */
    where: InvestorWhereUniqueInput
    /**
     * In case the Investor found by the `where` argument doesn't exist, create a new Investor with this data.
     */
    create: XOR<InvestorCreateInput, InvestorUncheckedCreateInput>
    /**
     * In case the Investor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvestorUpdateInput, InvestorUncheckedUpdateInput>
  }


  /**
   * Investor delete
   */
  export type InvestorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter which Investor to delete.
     */
    where: InvestorWhereUniqueInput
  }


  /**
   * Investor deleteMany
   */
  export type InvestorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Investors to delete
     */
    where?: InvestorWhereInput
  }


  /**
   * Investor.Comment
   */
  export type Investor$CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Investor.Project
   */
  export type Investor$ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Investor.payment
   */
  export type Investor$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }


  /**
   * Investor without action
   */
  export type InvestorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
  }



  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    researcherId: number | null
    investorId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    researcherId: number | null
    investorId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    researcherId: number | null
    investorId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    researcherId: number | null
    investorId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    comment: number
    createdAt: number
    updatedAt: number
    researcherId: number
    investorId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    researcherId?: true
    investorId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    researcherId?: true
    investorId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    researcherId?: true
    investorId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    researcherId?: true
    investorId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    researcherId?: true
    investorId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    comment: string
    createdAt: Date
    updatedAt: Date
    researcherId: number | null
    investorId: number | null
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    researcherId?: boolean
    investorId?: boolean
    researcher?: boolean | Comment$researcherArgs<ExtArgs>
    investor?: boolean | Comment$investorArgs<ExtArgs>
    Project?: boolean | Comment$ProjectArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    researcherId?: boolean
    investorId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcher?: boolean | Comment$researcherArgs<ExtArgs>
    investor?: boolean | Comment$investorArgs<ExtArgs>
    Project?: boolean | Comment$ProjectArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      researcher: Prisma.$ResearcherPayload<ExtArgs> | null
      investor: Prisma.$InvestorPayload<ExtArgs> | null
      Project: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      comment: string
      createdAt: Date
      updatedAt: Date
      researcherId: number | null
      investorId: number | null
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }


  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentCreateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    researcher<T extends Comment$researcherArgs<ExtArgs> = {}>(args?: Subset<T, Comment$researcherArgs<ExtArgs>>): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    investor<T extends Comment$investorArgs<ExtArgs> = {}>(args?: Subset<T, Comment$investorArgs<ExtArgs>>): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Project<T extends Comment$ProjectArgs<ExtArgs> = {}>(args?: Subset<T, Comment$ProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly comment: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly researcherId: FieldRef<"Comment", 'Int'>
    readonly investorId: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }


  /**
   * Comment.researcher
   */
  export type Comment$researcherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    where?: ResearcherWhereInput
  }


  /**
   * Comment.investor
   */
  export type Comment$investorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    where?: InvestorWhereInput
  }


  /**
   * Comment.Project
   */
  export type Comment$ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
  }



  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number | null
    project_budget: number | null
    commentId: number | null
    researcherId: number | null
    investorId: number | null
  }

  export type ProjectSumAggregateOutputType = {
    id: number | null
    project_budget: number | null
    commentId: number | null
    researcherId: number | null
    investorId: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: number | null
    project_name: string | null
    description_project: string | null
    project_image: string | null
    project_status: boolean | null
    starting_date: Date | null
    expected_finish_date: Date | null
    project_budget: number | null
    tags: string | null
    createdAt: Date | null
    updatedAt: Date | null
    commentId: number | null
    researcherId: number | null
    investorId: number | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number | null
    project_name: string | null
    description_project: string | null
    project_image: string | null
    project_status: boolean | null
    starting_date: Date | null
    expected_finish_date: Date | null
    project_budget: number | null
    tags: string | null
    createdAt: Date | null
    updatedAt: Date | null
    commentId: number | null
    researcherId: number | null
    investorId: number | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    project_name: number
    description_project: number
    project_image: number
    project_status: number
    starting_date: number
    expected_finish_date: number
    project_budget: number
    tags: number
    createdAt: number
    updatedAt: number
    commentId: number
    researcherId: number
    investorId: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
    project_budget?: true
    commentId?: true
    researcherId?: true
    investorId?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
    project_budget?: true
    commentId?: true
    researcherId?: true
    investorId?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    project_name?: true
    description_project?: true
    project_image?: true
    project_status?: true
    starting_date?: true
    expected_finish_date?: true
    project_budget?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
    commentId?: true
    researcherId?: true
    investorId?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    project_name?: true
    description_project?: true
    project_image?: true
    project_status?: true
    starting_date?: true
    expected_finish_date?: true
    project_budget?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
    commentId?: true
    researcherId?: true
    investorId?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    project_name?: true
    description_project?: true
    project_image?: true
    project_status?: true
    starting_date?: true
    expected_finish_date?: true
    project_budget?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
    commentId?: true
    researcherId?: true
    investorId?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: number
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date
    expected_finish_date: Date
    project_budget: number
    tags: string
    createdAt: Date
    updatedAt: Date
    commentId: number | null
    researcherId: number | null
    investorId: number | null
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_name?: boolean
    description_project?: boolean
    project_image?: boolean
    project_status?: boolean
    starting_date?: boolean
    expected_finish_date?: boolean
    project_budget?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    commentId?: boolean
    researcherId?: boolean
    investorId?: boolean
    comment?: boolean | Project$commentArgs<ExtArgs>
    researcher?: boolean | Project$researcherArgs<ExtArgs>
    investor?: boolean | Project$investorArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    project_name?: boolean
    description_project?: boolean
    project_image?: boolean
    project_status?: boolean
    starting_date?: boolean
    expected_finish_date?: boolean
    project_budget?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    commentId?: boolean
    researcherId?: boolean
    investorId?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | Project$commentArgs<ExtArgs>
    researcher?: boolean | Project$researcherArgs<ExtArgs>
    investor?: boolean | Project$investorArgs<ExtArgs>
  }


  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      comment: Prisma.$CommentPayload<ExtArgs> | null
      researcher: Prisma.$ResearcherPayload<ExtArgs> | null
      investor: Prisma.$InvestorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_name: string
      description_project: string
      project_image: string
      project_status: boolean
      starting_date: Date
      expected_finish_date: Date
      project_budget: number
      tags: string
      createdAt: Date
      updatedAt: Date
      commentId: number | null
      researcherId: number | null
      investorId: number | null
    }, ExtArgs["result"]["project"]>
    composites: {}
  }


  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    comment<T extends Project$commentArgs<ExtArgs> = {}>(args?: Subset<T, Project$commentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    researcher<T extends Project$researcherArgs<ExtArgs> = {}>(args?: Subset<T, Project$researcherArgs<ExtArgs>>): Prisma__ResearcherClient<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    investor<T extends Project$investorArgs<ExtArgs> = {}>(args?: Subset<T, Project$investorArgs<ExtArgs>>): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'Int'>
    readonly project_name: FieldRef<"Project", 'String'>
    readonly description_project: FieldRef<"Project", 'String'>
    readonly project_image: FieldRef<"Project", 'String'>
    readonly project_status: FieldRef<"Project", 'Boolean'>
    readonly starting_date: FieldRef<"Project", 'DateTime'>
    readonly expected_finish_date: FieldRef<"Project", 'DateTime'>
    readonly project_budget: FieldRef<"Project", 'Int'>
    readonly tags: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly commentId: FieldRef<"Project", 'Int'>
    readonly researcherId: FieldRef<"Project", 'Int'>
    readonly investorId: FieldRef<"Project", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }


  /**
   * Project.comment
   */
  export type Project$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }


  /**
   * Project.researcher
   */
  export type Project$researcherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    where?: ResearcherWhereInput
  }


  /**
   * Project.investor
   */
  export type Project$investorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    where?: InvestorWhereInput
  }


  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
  }



  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    price: number | null
    investorId: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    price: number | null
    investorId: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
    investorId: number | null
    status: boolean | null
    invoice: string | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
    investorId: number | null
    status: boolean | null
    invoice: string | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    price: number
    createdAt: number
    updatedAt: number
    investorId: number
    status: number
    invoice: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    price?: true
    investorId?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    price?: true
    investorId?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    investorId?: true
    status?: true
    invoice?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    investorId?: true
    status?: true
    invoice?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    investorId?: true
    status?: true
    invoice?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    price: number
    createdAt: Date
    updatedAt: Date
    investorId: number | null
    status: boolean
    invoice: string
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    investorId?: boolean
    status?: boolean
    invoice?: boolean
    Investor?: boolean | Payment$InvestorArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    investorId?: boolean
    status?: boolean
    invoice?: boolean
  }

  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Investor?: boolean | Payment$InvestorArgs<ExtArgs>
  }


  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      Investor: Prisma.$InvestorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      price: number
      createdAt: Date
      updatedAt: Date
      investorId: number | null
      status: boolean
      invoice: string
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }


  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
    **/
    create<T extends PaymentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payments.
     *     @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     *     @example
     *     // Create many Payments
     *     const payment = await prisma.payment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
    **/
    delete<T extends PaymentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Investor<T extends Payment$InvestorArgs<ExtArgs> = {}>(args?: Subset<T, Payment$InvestorArgs<ExtArgs>>): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly price: FieldRef<"Payment", 'Int'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
    readonly investorId: FieldRef<"Payment", 'Int'>
    readonly status: FieldRef<"Payment", 'Boolean'>
    readonly invoice: FieldRef<"Payment", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }


  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }


  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }


  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }


  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }


  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }


  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }


  /**
   * Payment.Investor
   */
  export type Payment$InvestorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvestorInclude<ExtArgs> | null
    where?: InvestorWhereInput
  }


  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
  }



  /**
   * Model Jurnal
   */

  export type AggregateJurnal = {
    _count: JurnalCountAggregateOutputType | null
    _avg: JurnalAvgAggregateOutputType | null
    _sum: JurnalSumAggregateOutputType | null
    _min: JurnalMinAggregateOutputType | null
    _max: JurnalMaxAggregateOutputType | null
  }

  export type JurnalAvgAggregateOutputType = {
    id: number | null
    researcherId: number | null
  }

  export type JurnalSumAggregateOutputType = {
    id: number | null
    researcherId: number | null
  }

  export type JurnalMinAggregateOutputType = {
    id: number | null
    abstract: string | null
    title: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    researcherId: number | null
  }

  export type JurnalMaxAggregateOutputType = {
    id: number | null
    abstract: string | null
    title: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    researcherId: number | null
  }

  export type JurnalCountAggregateOutputType = {
    id: number
    abstract: number
    title: number
    description: number
    createdAt: number
    updatedAt: number
    researcherId: number
    _all: number
  }


  export type JurnalAvgAggregateInputType = {
    id?: true
    researcherId?: true
  }

  export type JurnalSumAggregateInputType = {
    id?: true
    researcherId?: true
  }

  export type JurnalMinAggregateInputType = {
    id?: true
    abstract?: true
    title?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    researcherId?: true
  }

  export type JurnalMaxAggregateInputType = {
    id?: true
    abstract?: true
    title?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    researcherId?: true
  }

  export type JurnalCountAggregateInputType = {
    id?: true
    abstract?: true
    title?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    researcherId?: true
    _all?: true
  }

  export type JurnalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jurnal to aggregate.
     */
    where?: JurnalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jurnals to fetch.
     */
    orderBy?: JurnalOrderByWithRelationInput | JurnalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JurnalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jurnals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jurnals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jurnals
    **/
    _count?: true | JurnalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JurnalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JurnalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JurnalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JurnalMaxAggregateInputType
  }

  export type GetJurnalAggregateType<T extends JurnalAggregateArgs> = {
        [P in keyof T & keyof AggregateJurnal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJurnal[P]>
      : GetScalarType<T[P], AggregateJurnal[P]>
  }




  export type JurnalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JurnalWhereInput
    orderBy?: JurnalOrderByWithAggregationInput | JurnalOrderByWithAggregationInput[]
    by: JurnalScalarFieldEnum[] | JurnalScalarFieldEnum
    having?: JurnalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JurnalCountAggregateInputType | true
    _avg?: JurnalAvgAggregateInputType
    _sum?: JurnalSumAggregateInputType
    _min?: JurnalMinAggregateInputType
    _max?: JurnalMaxAggregateInputType
  }

  export type JurnalGroupByOutputType = {
    id: number
    abstract: string
    title: string
    description: string
    createdAt: Date
    updatedAt: Date
    researcherId: number | null
    _count: JurnalCountAggregateOutputType | null
    _avg: JurnalAvgAggregateOutputType | null
    _sum: JurnalSumAggregateOutputType | null
    _min: JurnalMinAggregateOutputType | null
    _max: JurnalMaxAggregateOutputType | null
  }

  type GetJurnalGroupByPayload<T extends JurnalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JurnalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JurnalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JurnalGroupByOutputType[P]>
            : GetScalarType<T[P], JurnalGroupByOutputType[P]>
        }
      >
    >


  export type JurnalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    abstract?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    researcherId?: boolean
    portofolio?: boolean | Jurnal$portofolioArgs<ExtArgs>
    _count?: boolean | JurnalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jurnal"]>

  export type JurnalSelectScalar = {
    id?: boolean
    abstract?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    researcherId?: boolean
  }

  export type JurnalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portofolio?: boolean | Jurnal$portofolioArgs<ExtArgs>
    _count?: boolean | JurnalCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $JurnalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Jurnal"
    objects: {
      portofolio: Prisma.$ResearcherPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      abstract: string
      title: string
      description: string
      createdAt: Date
      updatedAt: Date
      researcherId: number | null
    }, ExtArgs["result"]["jurnal"]>
    composites: {}
  }


  type JurnalGetPayload<S extends boolean | null | undefined | JurnalDefaultArgs> = $Result.GetResult<Prisma.$JurnalPayload, S>

  type JurnalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JurnalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JurnalCountAggregateInputType | true
    }

  export interface JurnalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jurnal'], meta: { name: 'Jurnal' } }
    /**
     * Find zero or one Jurnal that matches the filter.
     * @param {JurnalFindUniqueArgs} args - Arguments to find a Jurnal
     * @example
     * // Get one Jurnal
     * const jurnal = await prisma.jurnal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JurnalFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, JurnalFindUniqueArgs<ExtArgs>>
    ): Prisma__JurnalClient<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Jurnal that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JurnalFindUniqueOrThrowArgs} args - Arguments to find a Jurnal
     * @example
     * // Get one Jurnal
     * const jurnal = await prisma.jurnal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JurnalFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JurnalFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__JurnalClient<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Jurnal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JurnalFindFirstArgs} args - Arguments to find a Jurnal
     * @example
     * // Get one Jurnal
     * const jurnal = await prisma.jurnal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JurnalFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, JurnalFindFirstArgs<ExtArgs>>
    ): Prisma__JurnalClient<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Jurnal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JurnalFindFirstOrThrowArgs} args - Arguments to find a Jurnal
     * @example
     * // Get one Jurnal
     * const jurnal = await prisma.jurnal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JurnalFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JurnalFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__JurnalClient<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Jurnals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JurnalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jurnals
     * const jurnals = await prisma.jurnal.findMany()
     * 
     * // Get first 10 Jurnals
     * const jurnals = await prisma.jurnal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jurnalWithIdOnly = await prisma.jurnal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JurnalFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JurnalFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Jurnal.
     * @param {JurnalCreateArgs} args - Arguments to create a Jurnal.
     * @example
     * // Create one Jurnal
     * const Jurnal = await prisma.jurnal.create({
     *   data: {
     *     // ... data to create a Jurnal
     *   }
     * })
     * 
    **/
    create<T extends JurnalCreateArgs<ExtArgs>>(
      args: SelectSubset<T, JurnalCreateArgs<ExtArgs>>
    ): Prisma__JurnalClient<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Jurnals.
     *     @param {JurnalCreateManyArgs} args - Arguments to create many Jurnals.
     *     @example
     *     // Create many Jurnals
     *     const jurnal = await prisma.jurnal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JurnalCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JurnalCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jurnal.
     * @param {JurnalDeleteArgs} args - Arguments to delete one Jurnal.
     * @example
     * // Delete one Jurnal
     * const Jurnal = await prisma.jurnal.delete({
     *   where: {
     *     // ... filter to delete one Jurnal
     *   }
     * })
     * 
    **/
    delete<T extends JurnalDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, JurnalDeleteArgs<ExtArgs>>
    ): Prisma__JurnalClient<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Jurnal.
     * @param {JurnalUpdateArgs} args - Arguments to update one Jurnal.
     * @example
     * // Update one Jurnal
     * const jurnal = await prisma.jurnal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JurnalUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, JurnalUpdateArgs<ExtArgs>>
    ): Prisma__JurnalClient<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Jurnals.
     * @param {JurnalDeleteManyArgs} args - Arguments to filter Jurnals to delete.
     * @example
     * // Delete a few Jurnals
     * const { count } = await prisma.jurnal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JurnalDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JurnalDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jurnals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JurnalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jurnals
     * const jurnal = await prisma.jurnal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JurnalUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, JurnalUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jurnal.
     * @param {JurnalUpsertArgs} args - Arguments to update or create a Jurnal.
     * @example
     * // Update or create a Jurnal
     * const jurnal = await prisma.jurnal.upsert({
     *   create: {
     *     // ... data to create a Jurnal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jurnal we want to update
     *   }
     * })
    **/
    upsert<T extends JurnalUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, JurnalUpsertArgs<ExtArgs>>
    ): Prisma__JurnalClient<$Result.GetResult<Prisma.$JurnalPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Jurnals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JurnalCountArgs} args - Arguments to filter Jurnals to count.
     * @example
     * // Count the number of Jurnals
     * const count = await prisma.jurnal.count({
     *   where: {
     *     // ... the filter for the Jurnals we want to count
     *   }
     * })
    **/
    count<T extends JurnalCountArgs>(
      args?: Subset<T, JurnalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JurnalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jurnal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JurnalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JurnalAggregateArgs>(args: Subset<T, JurnalAggregateArgs>): Prisma.PrismaPromise<GetJurnalAggregateType<T>>

    /**
     * Group by Jurnal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JurnalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JurnalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JurnalGroupByArgs['orderBy'] }
        : { orderBy?: JurnalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JurnalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJurnalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jurnal model
   */
  readonly fields: JurnalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jurnal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JurnalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    portofolio<T extends Jurnal$portofolioArgs<ExtArgs> = {}>(args?: Subset<T, Jurnal$portofolioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearcherPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Jurnal model
   */ 
  interface JurnalFieldRefs {
    readonly id: FieldRef<"Jurnal", 'Int'>
    readonly abstract: FieldRef<"Jurnal", 'String'>
    readonly title: FieldRef<"Jurnal", 'String'>
    readonly description: FieldRef<"Jurnal", 'String'>
    readonly createdAt: FieldRef<"Jurnal", 'DateTime'>
    readonly updatedAt: FieldRef<"Jurnal", 'DateTime'>
    readonly researcherId: FieldRef<"Jurnal", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Jurnal findUnique
   */
  export type JurnalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    /**
     * Filter, which Jurnal to fetch.
     */
    where: JurnalWhereUniqueInput
  }


  /**
   * Jurnal findUniqueOrThrow
   */
  export type JurnalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    /**
     * Filter, which Jurnal to fetch.
     */
    where: JurnalWhereUniqueInput
  }


  /**
   * Jurnal findFirst
   */
  export type JurnalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    /**
     * Filter, which Jurnal to fetch.
     */
    where?: JurnalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jurnals to fetch.
     */
    orderBy?: JurnalOrderByWithRelationInput | JurnalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jurnals.
     */
    cursor?: JurnalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jurnals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jurnals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jurnals.
     */
    distinct?: JurnalScalarFieldEnum | JurnalScalarFieldEnum[]
  }


  /**
   * Jurnal findFirstOrThrow
   */
  export type JurnalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    /**
     * Filter, which Jurnal to fetch.
     */
    where?: JurnalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jurnals to fetch.
     */
    orderBy?: JurnalOrderByWithRelationInput | JurnalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jurnals.
     */
    cursor?: JurnalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jurnals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jurnals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jurnals.
     */
    distinct?: JurnalScalarFieldEnum | JurnalScalarFieldEnum[]
  }


  /**
   * Jurnal findMany
   */
  export type JurnalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    /**
     * Filter, which Jurnals to fetch.
     */
    where?: JurnalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jurnals to fetch.
     */
    orderBy?: JurnalOrderByWithRelationInput | JurnalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jurnals.
     */
    cursor?: JurnalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jurnals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jurnals.
     */
    skip?: number
    distinct?: JurnalScalarFieldEnum | JurnalScalarFieldEnum[]
  }


  /**
   * Jurnal create
   */
  export type JurnalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    /**
     * The data needed to create a Jurnal.
     */
    data: XOR<JurnalCreateInput, JurnalUncheckedCreateInput>
  }


  /**
   * Jurnal createMany
   */
  export type JurnalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jurnals.
     */
    data: JurnalCreateManyInput | JurnalCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Jurnal update
   */
  export type JurnalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    /**
     * The data needed to update a Jurnal.
     */
    data: XOR<JurnalUpdateInput, JurnalUncheckedUpdateInput>
    /**
     * Choose, which Jurnal to update.
     */
    where: JurnalWhereUniqueInput
  }


  /**
   * Jurnal updateMany
   */
  export type JurnalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jurnals.
     */
    data: XOR<JurnalUpdateManyMutationInput, JurnalUncheckedUpdateManyInput>
    /**
     * Filter which Jurnals to update
     */
    where?: JurnalWhereInput
  }


  /**
   * Jurnal upsert
   */
  export type JurnalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    /**
     * The filter to search for the Jurnal to update in case it exists.
     */
    where: JurnalWhereUniqueInput
    /**
     * In case the Jurnal found by the `where` argument doesn't exist, create a new Jurnal with this data.
     */
    create: XOR<JurnalCreateInput, JurnalUncheckedCreateInput>
    /**
     * In case the Jurnal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JurnalUpdateInput, JurnalUncheckedUpdateInput>
  }


  /**
   * Jurnal delete
   */
  export type JurnalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
    /**
     * Filter which Jurnal to delete.
     */
    where: JurnalWhereUniqueInput
  }


  /**
   * Jurnal deleteMany
   */
  export type JurnalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jurnals to delete
     */
    where?: JurnalWhereInput
  }


  /**
   * Jurnal.portofolio
   */
  export type Jurnal$portofolioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Researcher
     */
    select?: ResearcherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearcherInclude<ExtArgs> | null
    where?: ResearcherWhereInput
    orderBy?: ResearcherOrderByWithRelationInput | ResearcherOrderByWithRelationInput[]
    cursor?: ResearcherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResearcherScalarFieldEnum | ResearcherScalarFieldEnum[]
  }


  /**
   * Jurnal without action
   */
  export type JurnalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jurnal
     */
    select?: JurnalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JurnalInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ResearcherScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    education: 'education',
    scope: 'scope',
    research: 'research',
    institution: 'institution',
    profileImage: 'profileImage',
    email: 'email',
    password: 'password',
    background: 'background',
    gender: 'gender',
    role: 'role',
    location: 'location',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ResearcherScalarFieldEnum = (typeof ResearcherScalarFieldEnum)[keyof typeof ResearcherScalarFieldEnum]


  export const InvestorScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstname: 'firstname',
    lastname: 'lastname',
    budget: 'budget',
    profileImage: 'profileImage',
    institution: 'institution',
    range_member: 'range_member',
    industry: 'industry',
    industry_type: 'industry_type',
    isPremium: 'isPremium',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InvestorScalarFieldEnum = (typeof InvestorScalarFieldEnum)[keyof typeof InvestorScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    researcherId: 'researcherId',
    investorId: 'investorId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    project_name: 'project_name',
    description_project: 'description_project',
    project_image: 'project_image',
    project_status: 'project_status',
    starting_date: 'starting_date',
    expected_finish_date: 'expected_finish_date',
    project_budget: 'project_budget',
    tags: 'tags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    commentId: 'commentId',
    researcherId: 'researcherId',
    investorId: 'investorId'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    investorId: 'investorId',
    status: 'status',
    invoice: 'invoice'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const JurnalScalarFieldEnum: {
    id: 'id',
    abstract: 'abstract',
    title: 'title',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    researcherId: 'researcherId'
  };

  export type JurnalScalarFieldEnum = (typeof JurnalScalarFieldEnum)[keyof typeof JurnalScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ResearcherWhereInput = {
    AND?: ResearcherWhereInput | ResearcherWhereInput[]
    OR?: ResearcherWhereInput[]
    NOT?: ResearcherWhereInput | ResearcherWhereInput[]
    id?: IntFilter<"Researcher"> | number
    firstname?: StringFilter<"Researcher"> | string
    lastname?: StringFilter<"Researcher"> | string
    education?: StringFilter<"Researcher"> | string
    scope?: StringFilter<"Researcher"> | string
    research?: StringFilter<"Researcher"> | string
    institution?: StringFilter<"Researcher"> | string
    profileImage?: StringFilter<"Researcher"> | string
    email?: StringFilter<"Researcher"> | string
    password?: StringFilter<"Researcher"> | string
    background?: StringFilter<"Researcher"> | string
    gender?: StringFilter<"Researcher"> | string
    role?: StringFilter<"Researcher"> | string
    location?: StringFilter<"Researcher"> | string
    createdAt?: DateTimeFilter<"Researcher"> | Date | string
    updatedAt?: DateTimeFilter<"Researcher"> | Date | string
    portofolio?: JurnalListRelationFilter
    Comment?: CommentListRelationFilter
    Project?: ProjectListRelationFilter
  }

  export type ResearcherOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    education?: SortOrder
    scope?: SortOrder
    research?: SortOrder
    institution?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    password?: SortOrder
    background?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    portofolio?: JurnalOrderByRelationAggregateInput
    Comment?: CommentOrderByRelationAggregateInput
    Project?: ProjectOrderByRelationAggregateInput
  }

  export type ResearcherWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ResearcherWhereInput | ResearcherWhereInput[]
    OR?: ResearcherWhereInput[]
    NOT?: ResearcherWhereInput | ResearcherWhereInput[]
    firstname?: StringFilter<"Researcher"> | string
    lastname?: StringFilter<"Researcher"> | string
    education?: StringFilter<"Researcher"> | string
    scope?: StringFilter<"Researcher"> | string
    research?: StringFilter<"Researcher"> | string
    institution?: StringFilter<"Researcher"> | string
    profileImage?: StringFilter<"Researcher"> | string
    password?: StringFilter<"Researcher"> | string
    background?: StringFilter<"Researcher"> | string
    gender?: StringFilter<"Researcher"> | string
    role?: StringFilter<"Researcher"> | string
    location?: StringFilter<"Researcher"> | string
    createdAt?: DateTimeFilter<"Researcher"> | Date | string
    updatedAt?: DateTimeFilter<"Researcher"> | Date | string
    portofolio?: JurnalListRelationFilter
    Comment?: CommentListRelationFilter
    Project?: ProjectListRelationFilter
  }, "id" | "email">

  export type ResearcherOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    education?: SortOrder
    scope?: SortOrder
    research?: SortOrder
    institution?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    password?: SortOrder
    background?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ResearcherCountOrderByAggregateInput
    _avg?: ResearcherAvgOrderByAggregateInput
    _max?: ResearcherMaxOrderByAggregateInput
    _min?: ResearcherMinOrderByAggregateInput
    _sum?: ResearcherSumOrderByAggregateInput
  }

  export type ResearcherScalarWhereWithAggregatesInput = {
    AND?: ResearcherScalarWhereWithAggregatesInput | ResearcherScalarWhereWithAggregatesInput[]
    OR?: ResearcherScalarWhereWithAggregatesInput[]
    NOT?: ResearcherScalarWhereWithAggregatesInput | ResearcherScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Researcher"> | number
    firstname?: StringWithAggregatesFilter<"Researcher"> | string
    lastname?: StringWithAggregatesFilter<"Researcher"> | string
    education?: StringWithAggregatesFilter<"Researcher"> | string
    scope?: StringWithAggregatesFilter<"Researcher"> | string
    research?: StringWithAggregatesFilter<"Researcher"> | string
    institution?: StringWithAggregatesFilter<"Researcher"> | string
    profileImage?: StringWithAggregatesFilter<"Researcher"> | string
    email?: StringWithAggregatesFilter<"Researcher"> | string
    password?: StringWithAggregatesFilter<"Researcher"> | string
    background?: StringWithAggregatesFilter<"Researcher"> | string
    gender?: StringWithAggregatesFilter<"Researcher"> | string
    role?: StringWithAggregatesFilter<"Researcher"> | string
    location?: StringWithAggregatesFilter<"Researcher"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Researcher"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Researcher"> | Date | string
  }

  export type InvestorWhereInput = {
    AND?: InvestorWhereInput | InvestorWhereInput[]
    OR?: InvestorWhereInput[]
    NOT?: InvestorWhereInput | InvestorWhereInput[]
    id?: IntFilter<"Investor"> | number
    email?: StringFilter<"Investor"> | string
    password?: StringFilter<"Investor"> | string
    firstname?: StringFilter<"Investor"> | string
    lastname?: StringFilter<"Investor"> | string
    budget?: IntFilter<"Investor"> | number
    profileImage?: StringFilter<"Investor"> | string
    institution?: StringFilter<"Investor"> | string
    range_member?: StringFilter<"Investor"> | string
    industry?: StringFilter<"Investor"> | string
    industry_type?: StringFilter<"Investor"> | string
    isPremium?: BoolFilter<"Investor"> | boolean
    createdAt?: DateTimeFilter<"Investor"> | Date | string
    updatedAt?: DateTimeFilter<"Investor"> | Date | string
    Comment?: CommentListRelationFilter
    Project?: ProjectListRelationFilter
    payment?: PaymentListRelationFilter
  }

  export type InvestorOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    budget?: SortOrder
    profileImage?: SortOrder
    institution?: SortOrder
    range_member?: SortOrder
    industry?: SortOrder
    industry_type?: SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Comment?: CommentOrderByRelationAggregateInput
    Project?: ProjectOrderByRelationAggregateInput
    payment?: PaymentOrderByRelationAggregateInput
  }

  export type InvestorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: InvestorWhereInput | InvestorWhereInput[]
    OR?: InvestorWhereInput[]
    NOT?: InvestorWhereInput | InvestorWhereInput[]
    password?: StringFilter<"Investor"> | string
    firstname?: StringFilter<"Investor"> | string
    lastname?: StringFilter<"Investor"> | string
    budget?: IntFilter<"Investor"> | number
    profileImage?: StringFilter<"Investor"> | string
    institution?: StringFilter<"Investor"> | string
    range_member?: StringFilter<"Investor"> | string
    industry?: StringFilter<"Investor"> | string
    industry_type?: StringFilter<"Investor"> | string
    isPremium?: BoolFilter<"Investor"> | boolean
    createdAt?: DateTimeFilter<"Investor"> | Date | string
    updatedAt?: DateTimeFilter<"Investor"> | Date | string
    Comment?: CommentListRelationFilter
    Project?: ProjectListRelationFilter
    payment?: PaymentListRelationFilter
  }, "id" | "email">

  export type InvestorOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    budget?: SortOrder
    profileImage?: SortOrder
    institution?: SortOrder
    range_member?: SortOrder
    industry?: SortOrder
    industry_type?: SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InvestorCountOrderByAggregateInput
    _avg?: InvestorAvgOrderByAggregateInput
    _max?: InvestorMaxOrderByAggregateInput
    _min?: InvestorMinOrderByAggregateInput
    _sum?: InvestorSumOrderByAggregateInput
  }

  export type InvestorScalarWhereWithAggregatesInput = {
    AND?: InvestorScalarWhereWithAggregatesInput | InvestorScalarWhereWithAggregatesInput[]
    OR?: InvestorScalarWhereWithAggregatesInput[]
    NOT?: InvestorScalarWhereWithAggregatesInput | InvestorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Investor"> | number
    email?: StringWithAggregatesFilter<"Investor"> | string
    password?: StringWithAggregatesFilter<"Investor"> | string
    firstname?: StringWithAggregatesFilter<"Investor"> | string
    lastname?: StringWithAggregatesFilter<"Investor"> | string
    budget?: IntWithAggregatesFilter<"Investor"> | number
    profileImage?: StringWithAggregatesFilter<"Investor"> | string
    institution?: StringWithAggregatesFilter<"Investor"> | string
    range_member?: StringWithAggregatesFilter<"Investor"> | string
    industry?: StringWithAggregatesFilter<"Investor"> | string
    industry_type?: StringWithAggregatesFilter<"Investor"> | string
    isPremium?: BoolWithAggregatesFilter<"Investor"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Investor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Investor"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    comment?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    researcherId?: IntNullableFilter<"Comment"> | number | null
    investorId?: IntNullableFilter<"Comment"> | number | null
    researcher?: XOR<ResearcherNullableRelationFilter, ResearcherWhereInput> | null
    investor?: XOR<InvestorNullableRelationFilter, InvestorWhereInput> | null
    Project?: ProjectListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrderInput | SortOrder
    investorId?: SortOrderInput | SortOrder
    researcher?: ResearcherOrderByWithRelationInput
    investor?: InvestorOrderByWithRelationInput
    Project?: ProjectOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    comment?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    researcherId?: IntNullableFilter<"Comment"> | number | null
    investorId?: IntNullableFilter<"Comment"> | number | null
    researcher?: XOR<ResearcherNullableRelationFilter, ResearcherWhereInput> | null
    investor?: XOR<InvestorNullableRelationFilter, InvestorWhereInput> | null
    Project?: ProjectListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrderInput | SortOrder
    investorId?: SortOrderInput | SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    comment?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    researcherId?: IntNullableWithAggregatesFilter<"Comment"> | number | null
    investorId?: IntNullableWithAggregatesFilter<"Comment"> | number | null
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: IntFilter<"Project"> | number
    project_name?: StringFilter<"Project"> | string
    description_project?: StringFilter<"Project"> | string
    project_image?: StringFilter<"Project"> | string
    project_status?: BoolFilter<"Project"> | boolean
    starting_date?: DateTimeFilter<"Project"> | Date | string
    expected_finish_date?: DateTimeFilter<"Project"> | Date | string
    project_budget?: IntFilter<"Project"> | number
    tags?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    commentId?: IntNullableFilter<"Project"> | number | null
    researcherId?: IntNullableFilter<"Project"> | number | null
    investorId?: IntNullableFilter<"Project"> | number | null
    comment?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    researcher?: XOR<ResearcherNullableRelationFilter, ResearcherWhereInput> | null
    investor?: XOR<InvestorNullableRelationFilter, InvestorWhereInput> | null
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    project_name?: SortOrder
    description_project?: SortOrder
    project_image?: SortOrder
    project_status?: SortOrder
    starting_date?: SortOrder
    expected_finish_date?: SortOrder
    project_budget?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentId?: SortOrderInput | SortOrder
    researcherId?: SortOrderInput | SortOrder
    investorId?: SortOrderInput | SortOrder
    comment?: CommentOrderByWithRelationInput
    researcher?: ResearcherOrderByWithRelationInput
    investor?: InvestorOrderByWithRelationInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    project_name?: StringFilter<"Project"> | string
    description_project?: StringFilter<"Project"> | string
    project_image?: StringFilter<"Project"> | string
    project_status?: BoolFilter<"Project"> | boolean
    starting_date?: DateTimeFilter<"Project"> | Date | string
    expected_finish_date?: DateTimeFilter<"Project"> | Date | string
    project_budget?: IntFilter<"Project"> | number
    tags?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    commentId?: IntNullableFilter<"Project"> | number | null
    researcherId?: IntNullableFilter<"Project"> | number | null
    investorId?: IntNullableFilter<"Project"> | number | null
    comment?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    researcher?: XOR<ResearcherNullableRelationFilter, ResearcherWhereInput> | null
    investor?: XOR<InvestorNullableRelationFilter, InvestorWhereInput> | null
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    project_name?: SortOrder
    description_project?: SortOrder
    project_image?: SortOrder
    project_status?: SortOrder
    starting_date?: SortOrder
    expected_finish_date?: SortOrder
    project_budget?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentId?: SortOrderInput | SortOrder
    researcherId?: SortOrderInput | SortOrder
    investorId?: SortOrderInput | SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Project"> | number
    project_name?: StringWithAggregatesFilter<"Project"> | string
    description_project?: StringWithAggregatesFilter<"Project"> | string
    project_image?: StringWithAggregatesFilter<"Project"> | string
    project_status?: BoolWithAggregatesFilter<"Project"> | boolean
    starting_date?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    expected_finish_date?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    project_budget?: IntWithAggregatesFilter<"Project"> | number
    tags?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    commentId?: IntNullableWithAggregatesFilter<"Project"> | number | null
    researcherId?: IntNullableWithAggregatesFilter<"Project"> | number | null
    investorId?: IntNullableWithAggregatesFilter<"Project"> | number | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    price?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    investorId?: IntNullableFilter<"Payment"> | number | null
    status?: BoolFilter<"Payment"> | boolean
    invoice?: StringFilter<"Payment"> | string
    Investor?: XOR<InvestorNullableRelationFilter, InvestorWhereInput> | null
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrderInput | SortOrder
    status?: SortOrder
    invoice?: SortOrder
    Investor?: InvestorOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    price?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    investorId?: IntNullableFilter<"Payment"> | number | null
    status?: BoolFilter<"Payment"> | boolean
    invoice?: StringFilter<"Payment"> | string
    Investor?: XOR<InvestorNullableRelationFilter, InvestorWhereInput> | null
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrderInput | SortOrder
    status?: SortOrder
    invoice?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    price?: IntWithAggregatesFilter<"Payment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    investorId?: IntNullableWithAggregatesFilter<"Payment"> | number | null
    status?: BoolWithAggregatesFilter<"Payment"> | boolean
    invoice?: StringWithAggregatesFilter<"Payment"> | string
  }

  export type JurnalWhereInput = {
    AND?: JurnalWhereInput | JurnalWhereInput[]
    OR?: JurnalWhereInput[]
    NOT?: JurnalWhereInput | JurnalWhereInput[]
    id?: IntFilter<"Jurnal"> | number
    abstract?: StringFilter<"Jurnal"> | string
    title?: StringFilter<"Jurnal"> | string
    description?: StringFilter<"Jurnal"> | string
    createdAt?: DateTimeFilter<"Jurnal"> | Date | string
    updatedAt?: DateTimeFilter<"Jurnal"> | Date | string
    researcherId?: IntNullableFilter<"Jurnal"> | number | null
    portofolio?: ResearcherListRelationFilter
  }

  export type JurnalOrderByWithRelationInput = {
    id?: SortOrder
    abstract?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrderInput | SortOrder
    portofolio?: ResearcherOrderByRelationAggregateInput
  }

  export type JurnalWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JurnalWhereInput | JurnalWhereInput[]
    OR?: JurnalWhereInput[]
    NOT?: JurnalWhereInput | JurnalWhereInput[]
    abstract?: StringFilter<"Jurnal"> | string
    title?: StringFilter<"Jurnal"> | string
    description?: StringFilter<"Jurnal"> | string
    createdAt?: DateTimeFilter<"Jurnal"> | Date | string
    updatedAt?: DateTimeFilter<"Jurnal"> | Date | string
    researcherId?: IntNullableFilter<"Jurnal"> | number | null
    portofolio?: ResearcherListRelationFilter
  }, "id">

  export type JurnalOrderByWithAggregationInput = {
    id?: SortOrder
    abstract?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrderInput | SortOrder
    _count?: JurnalCountOrderByAggregateInput
    _avg?: JurnalAvgOrderByAggregateInput
    _max?: JurnalMaxOrderByAggregateInput
    _min?: JurnalMinOrderByAggregateInput
    _sum?: JurnalSumOrderByAggregateInput
  }

  export type JurnalScalarWhereWithAggregatesInput = {
    AND?: JurnalScalarWhereWithAggregatesInput | JurnalScalarWhereWithAggregatesInput[]
    OR?: JurnalScalarWhereWithAggregatesInput[]
    NOT?: JurnalScalarWhereWithAggregatesInput | JurnalScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Jurnal"> | number
    abstract?: StringWithAggregatesFilter<"Jurnal"> | string
    title?: StringWithAggregatesFilter<"Jurnal"> | string
    description?: StringWithAggregatesFilter<"Jurnal"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Jurnal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Jurnal"> | Date | string
    researcherId?: IntNullableWithAggregatesFilter<"Jurnal"> | number | null
  }

  export type ResearcherCreateInput = {
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    portofolio?: JurnalCreateNestedManyWithoutPortofolioInput
    Comment?: CommentCreateNestedManyWithoutResearcherInput
    Project?: ProjectCreateNestedManyWithoutResearcherInput
  }

  export type ResearcherUncheckedCreateInput = {
    id?: number
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    portofolio?: JurnalUncheckedCreateNestedManyWithoutPortofolioInput
    Comment?: CommentUncheckedCreateNestedManyWithoutResearcherInput
    Project?: ProjectUncheckedCreateNestedManyWithoutResearcherInput
  }

  export type ResearcherUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portofolio?: JurnalUpdateManyWithoutPortofolioNestedInput
    Comment?: CommentUpdateManyWithoutResearcherNestedInput
    Project?: ProjectUpdateManyWithoutResearcherNestedInput
  }

  export type ResearcherUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portofolio?: JurnalUncheckedUpdateManyWithoutPortofolioNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutResearcherNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutResearcherNestedInput
  }

  export type ResearcherCreateManyInput = {
    id?: number
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResearcherUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResearcherUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvestorCreateInput = {
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutInvestorInput
    Project?: ProjectCreateNestedManyWithoutInvestorInput
    payment?: PaymentCreateNestedManyWithoutInvestorInput
  }

  export type InvestorUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutInvestorInput
    Project?: ProjectUncheckedCreateNestedManyWithoutInvestorInput
    payment?: PaymentUncheckedCreateNestedManyWithoutInvestorInput
  }

  export type InvestorUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutInvestorNestedInput
    Project?: ProjectUpdateManyWithoutInvestorNestedInput
    payment?: PaymentUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutInvestorNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutInvestorNestedInput
    payment?: PaymentUncheckedUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorCreateManyInput = {
    id?: number
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvestorUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvestorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcher?: ResearcherCreateNestedOneWithoutCommentInput
    investor?: InvestorCreateNestedOneWithoutCommentInput
    Project?: ProjectCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
    investorId?: number | null
    Project?: ProjectUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcher?: ResearcherUpdateOneWithoutCommentNestedInput
    investor?: InvestorUpdateOneWithoutCommentNestedInput
    Project?: ProjectUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
    Project?: ProjectUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
    investorId?: number | null
  }

  export type CommentUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectCreateInput = {
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: CommentCreateNestedOneWithoutProjectInput
    researcher?: ResearcherCreateNestedOneWithoutProjectInput
    investor?: InvestorCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: number
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    commentId?: number | null
    researcherId?: number | null
    investorId?: number | null
  }

  export type ProjectUpdateInput = {
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: CommentUpdateOneWithoutProjectNestedInput
    researcher?: ResearcherUpdateOneWithoutProjectNestedInput
    investor?: InvestorUpdateOneWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectCreateManyInput = {
    id?: number
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    commentId?: number | null
    researcherId?: number | null
    investorId?: number | null
  }

  export type ProjectUpdateManyMutationInput = {
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PaymentCreateInput = {
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    invoice: string
    Investor?: InvestorCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    investorId?: number | null
    status: boolean
    invoice: string
  }

  export type PaymentUpdateInput = {
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    invoice?: StringFieldUpdateOperationsInput | string
    Investor?: InvestorUpdateOneWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: BoolFieldUpdateOperationsInput | boolean
    invoice?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentCreateManyInput = {
    id?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    investorId?: number | null
    status: boolean
    invoice: string
  }

  export type PaymentUpdateManyMutationInput = {
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    invoice?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: BoolFieldUpdateOperationsInput | boolean
    invoice?: StringFieldUpdateOperationsInput | string
  }

  export type JurnalCreateInput = {
    abstract: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
    portofolio?: ResearcherCreateNestedManyWithoutPortofolioInput
  }

  export type JurnalUncheckedCreateInput = {
    id?: number
    abstract: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
    portofolio?: ResearcherUncheckedCreateNestedManyWithoutPortofolioInput
  }

  export type JurnalUpdateInput = {
    abstract?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    portofolio?: ResearcherUpdateManyWithoutPortofolioNestedInput
  }

  export type JurnalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    abstract?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    portofolio?: ResearcherUncheckedUpdateManyWithoutPortofolioNestedInput
  }

  export type JurnalCreateManyInput = {
    id?: number
    abstract: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
  }

  export type JurnalUpdateManyMutationInput = {
    abstract?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type JurnalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    abstract?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type JurnalListRelationFilter = {
    every?: JurnalWhereInput
    some?: JurnalWhereInput
    none?: JurnalWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type JurnalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResearcherCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    education?: SortOrder
    scope?: SortOrder
    research?: SortOrder
    institution?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    password?: SortOrder
    background?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResearcherAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ResearcherMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    education?: SortOrder
    scope?: SortOrder
    research?: SortOrder
    institution?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    password?: SortOrder
    background?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResearcherMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    education?: SortOrder
    scope?: SortOrder
    research?: SortOrder
    institution?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    password?: SortOrder
    background?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResearcherSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvestorCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    budget?: SortOrder
    profileImage?: SortOrder
    institution?: SortOrder
    range_member?: SortOrder
    industry?: SortOrder
    industry_type?: SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvestorAvgOrderByAggregateInput = {
    id?: SortOrder
    budget?: SortOrder
  }

  export type InvestorMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    budget?: SortOrder
    profileImage?: SortOrder
    institution?: SortOrder
    range_member?: SortOrder
    industry?: SortOrder
    industry_type?: SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvestorMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    budget?: SortOrder
    profileImage?: SortOrder
    institution?: SortOrder
    range_member?: SortOrder
    industry?: SortOrder
    industry_type?: SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvestorSumOrderByAggregateInput = {
    id?: SortOrder
    budget?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ResearcherNullableRelationFilter = {
    is?: ResearcherWhereInput | null
    isNot?: ResearcherWhereInput | null
  }

  export type InvestorNullableRelationFilter = {
    is?: InvestorWhereInput | null
    isNot?: InvestorWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CommentNullableRelationFilter = {
    is?: CommentWhereInput | null
    isNot?: CommentWhereInput | null
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    project_name?: SortOrder
    description_project?: SortOrder
    project_image?: SortOrder
    project_status?: SortOrder
    starting_date?: SortOrder
    expected_finish_date?: SortOrder
    project_budget?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentId?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    id?: SortOrder
    project_budget?: SortOrder
    commentId?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    project_name?: SortOrder
    description_project?: SortOrder
    project_image?: SortOrder
    project_status?: SortOrder
    starting_date?: SortOrder
    expected_finish_date?: SortOrder
    project_budget?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentId?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    project_name?: SortOrder
    description_project?: SortOrder
    project_image?: SortOrder
    project_status?: SortOrder
    starting_date?: SortOrder
    expected_finish_date?: SortOrder
    project_budget?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentId?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    id?: SortOrder
    project_budget?: SortOrder
    commentId?: SortOrder
    researcherId?: SortOrder
    investorId?: SortOrder
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrder
    status?: SortOrder
    invoice?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    investorId?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrder
    status?: SortOrder
    invoice?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrder
    status?: SortOrder
    invoice?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    investorId?: SortOrder
  }

  export type ResearcherListRelationFilter = {
    every?: ResearcherWhereInput
    some?: ResearcherWhereInput
    none?: ResearcherWhereInput
  }

  export type ResearcherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JurnalCountOrderByAggregateInput = {
    id?: SortOrder
    abstract?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrder
  }

  export type JurnalAvgOrderByAggregateInput = {
    id?: SortOrder
    researcherId?: SortOrder
  }

  export type JurnalMaxOrderByAggregateInput = {
    id?: SortOrder
    abstract?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrder
  }

  export type JurnalMinOrderByAggregateInput = {
    id?: SortOrder
    abstract?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherId?: SortOrder
  }

  export type JurnalSumOrderByAggregateInput = {
    id?: SortOrder
    researcherId?: SortOrder
  }

  export type JurnalCreateNestedManyWithoutPortofolioInput = {
    create?: XOR<JurnalCreateWithoutPortofolioInput, JurnalUncheckedCreateWithoutPortofolioInput> | JurnalCreateWithoutPortofolioInput[] | JurnalUncheckedCreateWithoutPortofolioInput[]
    connectOrCreate?: JurnalCreateOrConnectWithoutPortofolioInput | JurnalCreateOrConnectWithoutPortofolioInput[]
    connect?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutResearcherInput = {
    create?: XOR<CommentCreateWithoutResearcherInput, CommentUncheckedCreateWithoutResearcherInput> | CommentCreateWithoutResearcherInput[] | CommentUncheckedCreateWithoutResearcherInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutResearcherInput | CommentCreateOrConnectWithoutResearcherInput[]
    createMany?: CommentCreateManyResearcherInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutResearcherInput = {
    create?: XOR<ProjectCreateWithoutResearcherInput, ProjectUncheckedCreateWithoutResearcherInput> | ProjectCreateWithoutResearcherInput[] | ProjectUncheckedCreateWithoutResearcherInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutResearcherInput | ProjectCreateOrConnectWithoutResearcherInput[]
    createMany?: ProjectCreateManyResearcherInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type JurnalUncheckedCreateNestedManyWithoutPortofolioInput = {
    create?: XOR<JurnalCreateWithoutPortofolioInput, JurnalUncheckedCreateWithoutPortofolioInput> | JurnalCreateWithoutPortofolioInput[] | JurnalUncheckedCreateWithoutPortofolioInput[]
    connectOrCreate?: JurnalCreateOrConnectWithoutPortofolioInput | JurnalCreateOrConnectWithoutPortofolioInput[]
    connect?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutResearcherInput = {
    create?: XOR<CommentCreateWithoutResearcherInput, CommentUncheckedCreateWithoutResearcherInput> | CommentCreateWithoutResearcherInput[] | CommentUncheckedCreateWithoutResearcherInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutResearcherInput | CommentCreateOrConnectWithoutResearcherInput[]
    createMany?: CommentCreateManyResearcherInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutResearcherInput = {
    create?: XOR<ProjectCreateWithoutResearcherInput, ProjectUncheckedCreateWithoutResearcherInput> | ProjectCreateWithoutResearcherInput[] | ProjectUncheckedCreateWithoutResearcherInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutResearcherInput | ProjectCreateOrConnectWithoutResearcherInput[]
    createMany?: ProjectCreateManyResearcherInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type JurnalUpdateManyWithoutPortofolioNestedInput = {
    create?: XOR<JurnalCreateWithoutPortofolioInput, JurnalUncheckedCreateWithoutPortofolioInput> | JurnalCreateWithoutPortofolioInput[] | JurnalUncheckedCreateWithoutPortofolioInput[]
    connectOrCreate?: JurnalCreateOrConnectWithoutPortofolioInput | JurnalCreateOrConnectWithoutPortofolioInput[]
    upsert?: JurnalUpsertWithWhereUniqueWithoutPortofolioInput | JurnalUpsertWithWhereUniqueWithoutPortofolioInput[]
    set?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
    disconnect?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
    delete?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
    connect?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
    update?: JurnalUpdateWithWhereUniqueWithoutPortofolioInput | JurnalUpdateWithWhereUniqueWithoutPortofolioInput[]
    updateMany?: JurnalUpdateManyWithWhereWithoutPortofolioInput | JurnalUpdateManyWithWhereWithoutPortofolioInput[]
    deleteMany?: JurnalScalarWhereInput | JurnalScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutResearcherNestedInput = {
    create?: XOR<CommentCreateWithoutResearcherInput, CommentUncheckedCreateWithoutResearcherInput> | CommentCreateWithoutResearcherInput[] | CommentUncheckedCreateWithoutResearcherInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutResearcherInput | CommentCreateOrConnectWithoutResearcherInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutResearcherInput | CommentUpsertWithWhereUniqueWithoutResearcherInput[]
    createMany?: CommentCreateManyResearcherInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutResearcherInput | CommentUpdateWithWhereUniqueWithoutResearcherInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutResearcherInput | CommentUpdateManyWithWhereWithoutResearcherInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutResearcherNestedInput = {
    create?: XOR<ProjectCreateWithoutResearcherInput, ProjectUncheckedCreateWithoutResearcherInput> | ProjectCreateWithoutResearcherInput[] | ProjectUncheckedCreateWithoutResearcherInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutResearcherInput | ProjectCreateOrConnectWithoutResearcherInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutResearcherInput | ProjectUpsertWithWhereUniqueWithoutResearcherInput[]
    createMany?: ProjectCreateManyResearcherInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutResearcherInput | ProjectUpdateWithWhereUniqueWithoutResearcherInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutResearcherInput | ProjectUpdateManyWithWhereWithoutResearcherInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JurnalUncheckedUpdateManyWithoutPortofolioNestedInput = {
    create?: XOR<JurnalCreateWithoutPortofolioInput, JurnalUncheckedCreateWithoutPortofolioInput> | JurnalCreateWithoutPortofolioInput[] | JurnalUncheckedCreateWithoutPortofolioInput[]
    connectOrCreate?: JurnalCreateOrConnectWithoutPortofolioInput | JurnalCreateOrConnectWithoutPortofolioInput[]
    upsert?: JurnalUpsertWithWhereUniqueWithoutPortofolioInput | JurnalUpsertWithWhereUniqueWithoutPortofolioInput[]
    set?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
    disconnect?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
    delete?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
    connect?: JurnalWhereUniqueInput | JurnalWhereUniqueInput[]
    update?: JurnalUpdateWithWhereUniqueWithoutPortofolioInput | JurnalUpdateWithWhereUniqueWithoutPortofolioInput[]
    updateMany?: JurnalUpdateManyWithWhereWithoutPortofolioInput | JurnalUpdateManyWithWhereWithoutPortofolioInput[]
    deleteMany?: JurnalScalarWhereInput | JurnalScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutResearcherNestedInput = {
    create?: XOR<CommentCreateWithoutResearcherInput, CommentUncheckedCreateWithoutResearcherInput> | CommentCreateWithoutResearcherInput[] | CommentUncheckedCreateWithoutResearcherInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutResearcherInput | CommentCreateOrConnectWithoutResearcherInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutResearcherInput | CommentUpsertWithWhereUniqueWithoutResearcherInput[]
    createMany?: CommentCreateManyResearcherInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutResearcherInput | CommentUpdateWithWhereUniqueWithoutResearcherInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutResearcherInput | CommentUpdateManyWithWhereWithoutResearcherInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutResearcherNestedInput = {
    create?: XOR<ProjectCreateWithoutResearcherInput, ProjectUncheckedCreateWithoutResearcherInput> | ProjectCreateWithoutResearcherInput[] | ProjectUncheckedCreateWithoutResearcherInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutResearcherInput | ProjectCreateOrConnectWithoutResearcherInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutResearcherInput | ProjectUpsertWithWhereUniqueWithoutResearcherInput[]
    createMany?: ProjectCreateManyResearcherInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutResearcherInput | ProjectUpdateWithWhereUniqueWithoutResearcherInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutResearcherInput | ProjectUpdateManyWithWhereWithoutResearcherInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CommentCreateNestedManyWithoutInvestorInput = {
    create?: XOR<CommentCreateWithoutInvestorInput, CommentUncheckedCreateWithoutInvestorInput> | CommentCreateWithoutInvestorInput[] | CommentUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutInvestorInput | CommentCreateOrConnectWithoutInvestorInput[]
    createMany?: CommentCreateManyInvestorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutInvestorInput = {
    create?: XOR<ProjectCreateWithoutInvestorInput, ProjectUncheckedCreateWithoutInvestorInput> | ProjectCreateWithoutInvestorInput[] | ProjectUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutInvestorInput | ProjectCreateOrConnectWithoutInvestorInput[]
    createMany?: ProjectCreateManyInvestorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutInvestorInput = {
    create?: XOR<PaymentCreateWithoutInvestorInput, PaymentUncheckedCreateWithoutInvestorInput> | PaymentCreateWithoutInvestorInput[] | PaymentUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvestorInput | PaymentCreateOrConnectWithoutInvestorInput[]
    createMany?: PaymentCreateManyInvestorInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutInvestorInput = {
    create?: XOR<CommentCreateWithoutInvestorInput, CommentUncheckedCreateWithoutInvestorInput> | CommentCreateWithoutInvestorInput[] | CommentUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutInvestorInput | CommentCreateOrConnectWithoutInvestorInput[]
    createMany?: CommentCreateManyInvestorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutInvestorInput = {
    create?: XOR<ProjectCreateWithoutInvestorInput, ProjectUncheckedCreateWithoutInvestorInput> | ProjectCreateWithoutInvestorInput[] | ProjectUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutInvestorInput | ProjectCreateOrConnectWithoutInvestorInput[]
    createMany?: ProjectCreateManyInvestorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutInvestorInput = {
    create?: XOR<PaymentCreateWithoutInvestorInput, PaymentUncheckedCreateWithoutInvestorInput> | PaymentCreateWithoutInvestorInput[] | PaymentUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvestorInput | PaymentCreateOrConnectWithoutInvestorInput[]
    createMany?: PaymentCreateManyInvestorInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CommentUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<CommentCreateWithoutInvestorInput, CommentUncheckedCreateWithoutInvestorInput> | CommentCreateWithoutInvestorInput[] | CommentUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutInvestorInput | CommentCreateOrConnectWithoutInvestorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutInvestorInput | CommentUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: CommentCreateManyInvestorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutInvestorInput | CommentUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutInvestorInput | CommentUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<ProjectCreateWithoutInvestorInput, ProjectUncheckedCreateWithoutInvestorInput> | ProjectCreateWithoutInvestorInput[] | ProjectUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutInvestorInput | ProjectCreateOrConnectWithoutInvestorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutInvestorInput | ProjectUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: ProjectCreateManyInvestorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutInvestorInput | ProjectUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutInvestorInput | ProjectUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<PaymentCreateWithoutInvestorInput, PaymentUncheckedCreateWithoutInvestorInput> | PaymentCreateWithoutInvestorInput[] | PaymentUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvestorInput | PaymentCreateOrConnectWithoutInvestorInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutInvestorInput | PaymentUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: PaymentCreateManyInvestorInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutInvestorInput | PaymentUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutInvestorInput | PaymentUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<CommentCreateWithoutInvestorInput, CommentUncheckedCreateWithoutInvestorInput> | CommentCreateWithoutInvestorInput[] | CommentUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutInvestorInput | CommentCreateOrConnectWithoutInvestorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutInvestorInput | CommentUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: CommentCreateManyInvestorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutInvestorInput | CommentUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutInvestorInput | CommentUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<ProjectCreateWithoutInvestorInput, ProjectUncheckedCreateWithoutInvestorInput> | ProjectCreateWithoutInvestorInput[] | ProjectUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutInvestorInput | ProjectCreateOrConnectWithoutInvestorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutInvestorInput | ProjectUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: ProjectCreateManyInvestorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutInvestorInput | ProjectUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutInvestorInput | ProjectUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<PaymentCreateWithoutInvestorInput, PaymentUncheckedCreateWithoutInvestorInput> | PaymentCreateWithoutInvestorInput[] | PaymentUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvestorInput | PaymentCreateOrConnectWithoutInvestorInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutInvestorInput | PaymentUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: PaymentCreateManyInvestorInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutInvestorInput | PaymentUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutInvestorInput | PaymentUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ResearcherCreateNestedOneWithoutCommentInput = {
    create?: XOR<ResearcherCreateWithoutCommentInput, ResearcherUncheckedCreateWithoutCommentInput>
    connectOrCreate?: ResearcherCreateOrConnectWithoutCommentInput
    connect?: ResearcherWhereUniqueInput
  }

  export type InvestorCreateNestedOneWithoutCommentInput = {
    create?: XOR<InvestorCreateWithoutCommentInput, InvestorUncheckedCreateWithoutCommentInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutCommentInput
    connect?: InvestorWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutCommentInput = {
    create?: XOR<ProjectCreateWithoutCommentInput, ProjectUncheckedCreateWithoutCommentInput> | ProjectCreateWithoutCommentInput[] | ProjectUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentInput | ProjectCreateOrConnectWithoutCommentInput[]
    createMany?: ProjectCreateManyCommentInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<ProjectCreateWithoutCommentInput, ProjectUncheckedCreateWithoutCommentInput> | ProjectCreateWithoutCommentInput[] | ProjectUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentInput | ProjectCreateOrConnectWithoutCommentInput[]
    createMany?: ProjectCreateManyCommentInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ResearcherUpdateOneWithoutCommentNestedInput = {
    create?: XOR<ResearcherCreateWithoutCommentInput, ResearcherUncheckedCreateWithoutCommentInput>
    connectOrCreate?: ResearcherCreateOrConnectWithoutCommentInput
    upsert?: ResearcherUpsertWithoutCommentInput
    disconnect?: ResearcherWhereInput | boolean
    delete?: ResearcherWhereInput | boolean
    connect?: ResearcherWhereUniqueInput
    update?: XOR<XOR<ResearcherUpdateToOneWithWhereWithoutCommentInput, ResearcherUpdateWithoutCommentInput>, ResearcherUncheckedUpdateWithoutCommentInput>
  }

  export type InvestorUpdateOneWithoutCommentNestedInput = {
    create?: XOR<InvestorCreateWithoutCommentInput, InvestorUncheckedCreateWithoutCommentInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutCommentInput
    upsert?: InvestorUpsertWithoutCommentInput
    disconnect?: InvestorWhereInput | boolean
    delete?: InvestorWhereInput | boolean
    connect?: InvestorWhereUniqueInput
    update?: XOR<XOR<InvestorUpdateToOneWithWhereWithoutCommentInput, InvestorUpdateWithoutCommentInput>, InvestorUncheckedUpdateWithoutCommentInput>
  }

  export type ProjectUpdateManyWithoutCommentNestedInput = {
    create?: XOR<ProjectCreateWithoutCommentInput, ProjectUncheckedCreateWithoutCommentInput> | ProjectCreateWithoutCommentInput[] | ProjectUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentInput | ProjectCreateOrConnectWithoutCommentInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutCommentInput | ProjectUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: ProjectCreateManyCommentInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutCommentInput | ProjectUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutCommentInput | ProjectUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<ProjectCreateWithoutCommentInput, ProjectUncheckedCreateWithoutCommentInput> | ProjectCreateWithoutCommentInput[] | ProjectUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentInput | ProjectCreateOrConnectWithoutCommentInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutCommentInput | ProjectUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: ProjectCreateManyCommentInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutCommentInput | ProjectUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutCommentInput | ProjectUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CommentCreateNestedOneWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput
    connect?: CommentWhereUniqueInput
  }

  export type ResearcherCreateNestedOneWithoutProjectInput = {
    create?: XOR<ResearcherCreateWithoutProjectInput, ResearcherUncheckedCreateWithoutProjectInput>
    connectOrCreate?: ResearcherCreateOrConnectWithoutProjectInput
    connect?: ResearcherWhereUniqueInput
  }

  export type InvestorCreateNestedOneWithoutProjectInput = {
    create?: XOR<InvestorCreateWithoutProjectInput, InvestorUncheckedCreateWithoutProjectInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutProjectInput
    connect?: InvestorWhereUniqueInput
  }

  export type CommentUpdateOneWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput
    upsert?: CommentUpsertWithoutProjectInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutProjectInput, CommentUpdateWithoutProjectInput>, CommentUncheckedUpdateWithoutProjectInput>
  }

  export type ResearcherUpdateOneWithoutProjectNestedInput = {
    create?: XOR<ResearcherCreateWithoutProjectInput, ResearcherUncheckedCreateWithoutProjectInput>
    connectOrCreate?: ResearcherCreateOrConnectWithoutProjectInput
    upsert?: ResearcherUpsertWithoutProjectInput
    disconnect?: ResearcherWhereInput | boolean
    delete?: ResearcherWhereInput | boolean
    connect?: ResearcherWhereUniqueInput
    update?: XOR<XOR<ResearcherUpdateToOneWithWhereWithoutProjectInput, ResearcherUpdateWithoutProjectInput>, ResearcherUncheckedUpdateWithoutProjectInput>
  }

  export type InvestorUpdateOneWithoutProjectNestedInput = {
    create?: XOR<InvestorCreateWithoutProjectInput, InvestorUncheckedCreateWithoutProjectInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutProjectInput
    upsert?: InvestorUpsertWithoutProjectInput
    disconnect?: InvestorWhereInput | boolean
    delete?: InvestorWhereInput | boolean
    connect?: InvestorWhereUniqueInput
    update?: XOR<XOR<InvestorUpdateToOneWithWhereWithoutProjectInput, InvestorUpdateWithoutProjectInput>, InvestorUncheckedUpdateWithoutProjectInput>
  }

  export type InvestorCreateNestedOneWithoutPaymentInput = {
    create?: XOR<InvestorCreateWithoutPaymentInput, InvestorUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutPaymentInput
    connect?: InvestorWhereUniqueInput
  }

  export type InvestorUpdateOneWithoutPaymentNestedInput = {
    create?: XOR<InvestorCreateWithoutPaymentInput, InvestorUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutPaymentInput
    upsert?: InvestorUpsertWithoutPaymentInput
    disconnect?: InvestorWhereInput | boolean
    delete?: InvestorWhereInput | boolean
    connect?: InvestorWhereUniqueInput
    update?: XOR<XOR<InvestorUpdateToOneWithWhereWithoutPaymentInput, InvestorUpdateWithoutPaymentInput>, InvestorUncheckedUpdateWithoutPaymentInput>
  }

  export type ResearcherCreateNestedManyWithoutPortofolioInput = {
    create?: XOR<ResearcherCreateWithoutPortofolioInput, ResearcherUncheckedCreateWithoutPortofolioInput> | ResearcherCreateWithoutPortofolioInput[] | ResearcherUncheckedCreateWithoutPortofolioInput[]
    connectOrCreate?: ResearcherCreateOrConnectWithoutPortofolioInput | ResearcherCreateOrConnectWithoutPortofolioInput[]
    connect?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
  }

  export type ResearcherUncheckedCreateNestedManyWithoutPortofolioInput = {
    create?: XOR<ResearcherCreateWithoutPortofolioInput, ResearcherUncheckedCreateWithoutPortofolioInput> | ResearcherCreateWithoutPortofolioInput[] | ResearcherUncheckedCreateWithoutPortofolioInput[]
    connectOrCreate?: ResearcherCreateOrConnectWithoutPortofolioInput | ResearcherCreateOrConnectWithoutPortofolioInput[]
    connect?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
  }

  export type ResearcherUpdateManyWithoutPortofolioNestedInput = {
    create?: XOR<ResearcherCreateWithoutPortofolioInput, ResearcherUncheckedCreateWithoutPortofolioInput> | ResearcherCreateWithoutPortofolioInput[] | ResearcherUncheckedCreateWithoutPortofolioInput[]
    connectOrCreate?: ResearcherCreateOrConnectWithoutPortofolioInput | ResearcherCreateOrConnectWithoutPortofolioInput[]
    upsert?: ResearcherUpsertWithWhereUniqueWithoutPortofolioInput | ResearcherUpsertWithWhereUniqueWithoutPortofolioInput[]
    set?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
    disconnect?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
    delete?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
    connect?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
    update?: ResearcherUpdateWithWhereUniqueWithoutPortofolioInput | ResearcherUpdateWithWhereUniqueWithoutPortofolioInput[]
    updateMany?: ResearcherUpdateManyWithWhereWithoutPortofolioInput | ResearcherUpdateManyWithWhereWithoutPortofolioInput[]
    deleteMany?: ResearcherScalarWhereInput | ResearcherScalarWhereInput[]
  }

  export type ResearcherUncheckedUpdateManyWithoutPortofolioNestedInput = {
    create?: XOR<ResearcherCreateWithoutPortofolioInput, ResearcherUncheckedCreateWithoutPortofolioInput> | ResearcherCreateWithoutPortofolioInput[] | ResearcherUncheckedCreateWithoutPortofolioInput[]
    connectOrCreate?: ResearcherCreateOrConnectWithoutPortofolioInput | ResearcherCreateOrConnectWithoutPortofolioInput[]
    upsert?: ResearcherUpsertWithWhereUniqueWithoutPortofolioInput | ResearcherUpsertWithWhereUniqueWithoutPortofolioInput[]
    set?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
    disconnect?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
    delete?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
    connect?: ResearcherWhereUniqueInput | ResearcherWhereUniqueInput[]
    update?: ResearcherUpdateWithWhereUniqueWithoutPortofolioInput | ResearcherUpdateWithWhereUniqueWithoutPortofolioInput[]
    updateMany?: ResearcherUpdateManyWithWhereWithoutPortofolioInput | ResearcherUpdateManyWithWhereWithoutPortofolioInput[]
    deleteMany?: ResearcherScalarWhereInput | ResearcherScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type JurnalCreateWithoutPortofolioInput = {
    abstract: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
  }

  export type JurnalUncheckedCreateWithoutPortofolioInput = {
    id?: number
    abstract: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
  }

  export type JurnalCreateOrConnectWithoutPortofolioInput = {
    where: JurnalWhereUniqueInput
    create: XOR<JurnalCreateWithoutPortofolioInput, JurnalUncheckedCreateWithoutPortofolioInput>
  }

  export type CommentCreateWithoutResearcherInput = {
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    investor?: InvestorCreateNestedOneWithoutCommentInput
    Project?: ProjectCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutResearcherInput = {
    id?: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    investorId?: number | null
    Project?: ProjectUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutResearcherInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutResearcherInput, CommentUncheckedCreateWithoutResearcherInput>
  }

  export type CommentCreateManyResearcherInputEnvelope = {
    data: CommentCreateManyResearcherInput | CommentCreateManyResearcherInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutResearcherInput = {
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: CommentCreateNestedOneWithoutProjectInput
    investor?: InvestorCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutResearcherInput = {
    id?: number
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    commentId?: number | null
    investorId?: number | null
  }

  export type ProjectCreateOrConnectWithoutResearcherInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutResearcherInput, ProjectUncheckedCreateWithoutResearcherInput>
  }

  export type ProjectCreateManyResearcherInputEnvelope = {
    data: ProjectCreateManyResearcherInput | ProjectCreateManyResearcherInput[]
    skipDuplicates?: boolean
  }

  export type JurnalUpsertWithWhereUniqueWithoutPortofolioInput = {
    where: JurnalWhereUniqueInput
    update: XOR<JurnalUpdateWithoutPortofolioInput, JurnalUncheckedUpdateWithoutPortofolioInput>
    create: XOR<JurnalCreateWithoutPortofolioInput, JurnalUncheckedCreateWithoutPortofolioInput>
  }

  export type JurnalUpdateWithWhereUniqueWithoutPortofolioInput = {
    where: JurnalWhereUniqueInput
    data: XOR<JurnalUpdateWithoutPortofolioInput, JurnalUncheckedUpdateWithoutPortofolioInput>
  }

  export type JurnalUpdateManyWithWhereWithoutPortofolioInput = {
    where: JurnalScalarWhereInput
    data: XOR<JurnalUpdateManyMutationInput, JurnalUncheckedUpdateManyWithoutPortofolioInput>
  }

  export type JurnalScalarWhereInput = {
    AND?: JurnalScalarWhereInput | JurnalScalarWhereInput[]
    OR?: JurnalScalarWhereInput[]
    NOT?: JurnalScalarWhereInput | JurnalScalarWhereInput[]
    id?: IntFilter<"Jurnal"> | number
    abstract?: StringFilter<"Jurnal"> | string
    title?: StringFilter<"Jurnal"> | string
    description?: StringFilter<"Jurnal"> | string
    createdAt?: DateTimeFilter<"Jurnal"> | Date | string
    updatedAt?: DateTimeFilter<"Jurnal"> | Date | string
    researcherId?: IntNullableFilter<"Jurnal"> | number | null
  }

  export type CommentUpsertWithWhereUniqueWithoutResearcherInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutResearcherInput, CommentUncheckedUpdateWithoutResearcherInput>
    create: XOR<CommentCreateWithoutResearcherInput, CommentUncheckedCreateWithoutResearcherInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutResearcherInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutResearcherInput, CommentUncheckedUpdateWithoutResearcherInput>
  }

  export type CommentUpdateManyWithWhereWithoutResearcherInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutResearcherInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    comment?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    researcherId?: IntNullableFilter<"Comment"> | number | null
    investorId?: IntNullableFilter<"Comment"> | number | null
  }

  export type ProjectUpsertWithWhereUniqueWithoutResearcherInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutResearcherInput, ProjectUncheckedUpdateWithoutResearcherInput>
    create: XOR<ProjectCreateWithoutResearcherInput, ProjectUncheckedCreateWithoutResearcherInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutResearcherInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutResearcherInput, ProjectUncheckedUpdateWithoutResearcherInput>
  }

  export type ProjectUpdateManyWithWhereWithoutResearcherInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutResearcherInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: IntFilter<"Project"> | number
    project_name?: StringFilter<"Project"> | string
    description_project?: StringFilter<"Project"> | string
    project_image?: StringFilter<"Project"> | string
    project_status?: BoolFilter<"Project"> | boolean
    starting_date?: DateTimeFilter<"Project"> | Date | string
    expected_finish_date?: DateTimeFilter<"Project"> | Date | string
    project_budget?: IntFilter<"Project"> | number
    tags?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    commentId?: IntNullableFilter<"Project"> | number | null
    researcherId?: IntNullableFilter<"Project"> | number | null
    investorId?: IntNullableFilter<"Project"> | number | null
  }

  export type CommentCreateWithoutInvestorInput = {
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcher?: ResearcherCreateNestedOneWithoutCommentInput
    Project?: ProjectCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutInvestorInput = {
    id?: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
    Project?: ProjectUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutInvestorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutInvestorInput, CommentUncheckedCreateWithoutInvestorInput>
  }

  export type CommentCreateManyInvestorInputEnvelope = {
    data: CommentCreateManyInvestorInput | CommentCreateManyInvestorInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutInvestorInput = {
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: CommentCreateNestedOneWithoutProjectInput
    researcher?: ResearcherCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutInvestorInput = {
    id?: number
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    commentId?: number | null
    researcherId?: number | null
  }

  export type ProjectCreateOrConnectWithoutInvestorInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutInvestorInput, ProjectUncheckedCreateWithoutInvestorInput>
  }

  export type ProjectCreateManyInvestorInputEnvelope = {
    data: ProjectCreateManyInvestorInput | ProjectCreateManyInvestorInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutInvestorInput = {
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    invoice: string
  }

  export type PaymentUncheckedCreateWithoutInvestorInput = {
    id?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    invoice: string
  }

  export type PaymentCreateOrConnectWithoutInvestorInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutInvestorInput, PaymentUncheckedCreateWithoutInvestorInput>
  }

  export type PaymentCreateManyInvestorInputEnvelope = {
    data: PaymentCreateManyInvestorInput | PaymentCreateManyInvestorInput[]
    skipDuplicates?: boolean
  }

  export type CommentUpsertWithWhereUniqueWithoutInvestorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutInvestorInput, CommentUncheckedUpdateWithoutInvestorInput>
    create: XOR<CommentCreateWithoutInvestorInput, CommentUncheckedCreateWithoutInvestorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutInvestorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutInvestorInput, CommentUncheckedUpdateWithoutInvestorInput>
  }

  export type CommentUpdateManyWithWhereWithoutInvestorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutInvestorInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutInvestorInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutInvestorInput, ProjectUncheckedUpdateWithoutInvestorInput>
    create: XOR<ProjectCreateWithoutInvestorInput, ProjectUncheckedCreateWithoutInvestorInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutInvestorInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutInvestorInput, ProjectUncheckedUpdateWithoutInvestorInput>
  }

  export type ProjectUpdateManyWithWhereWithoutInvestorInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutInvestorInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutInvestorInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutInvestorInput, PaymentUncheckedUpdateWithoutInvestorInput>
    create: XOR<PaymentCreateWithoutInvestorInput, PaymentUncheckedCreateWithoutInvestorInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutInvestorInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutInvestorInput, PaymentUncheckedUpdateWithoutInvestorInput>
  }

  export type PaymentUpdateManyWithWhereWithoutInvestorInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutInvestorInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    price?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    investorId?: IntNullableFilter<"Payment"> | number | null
    status?: BoolFilter<"Payment"> | boolean
    invoice?: StringFilter<"Payment"> | string
  }

  export type ResearcherCreateWithoutCommentInput = {
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    portofolio?: JurnalCreateNestedManyWithoutPortofolioInput
    Project?: ProjectCreateNestedManyWithoutResearcherInput
  }

  export type ResearcherUncheckedCreateWithoutCommentInput = {
    id?: number
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    portofolio?: JurnalUncheckedCreateNestedManyWithoutPortofolioInput
    Project?: ProjectUncheckedCreateNestedManyWithoutResearcherInput
  }

  export type ResearcherCreateOrConnectWithoutCommentInput = {
    where: ResearcherWhereUniqueInput
    create: XOR<ResearcherCreateWithoutCommentInput, ResearcherUncheckedCreateWithoutCommentInput>
  }

  export type InvestorCreateWithoutCommentInput = {
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Project?: ProjectCreateNestedManyWithoutInvestorInput
    payment?: PaymentCreateNestedManyWithoutInvestorInput
  }

  export type InvestorUncheckedCreateWithoutCommentInput = {
    id?: number
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Project?: ProjectUncheckedCreateNestedManyWithoutInvestorInput
    payment?: PaymentUncheckedCreateNestedManyWithoutInvestorInput
  }

  export type InvestorCreateOrConnectWithoutCommentInput = {
    where: InvestorWhereUniqueInput
    create: XOR<InvestorCreateWithoutCommentInput, InvestorUncheckedCreateWithoutCommentInput>
  }

  export type ProjectCreateWithoutCommentInput = {
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcher?: ResearcherCreateNestedOneWithoutProjectInput
    investor?: InvestorCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCommentInput = {
    id?: number
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
    investorId?: number | null
  }

  export type ProjectCreateOrConnectWithoutCommentInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCommentInput, ProjectUncheckedCreateWithoutCommentInput>
  }

  export type ProjectCreateManyCommentInputEnvelope = {
    data: ProjectCreateManyCommentInput | ProjectCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type ResearcherUpsertWithoutCommentInput = {
    update: XOR<ResearcherUpdateWithoutCommentInput, ResearcherUncheckedUpdateWithoutCommentInput>
    create: XOR<ResearcherCreateWithoutCommentInput, ResearcherUncheckedCreateWithoutCommentInput>
    where?: ResearcherWhereInput
  }

  export type ResearcherUpdateToOneWithWhereWithoutCommentInput = {
    where?: ResearcherWhereInput
    data: XOR<ResearcherUpdateWithoutCommentInput, ResearcherUncheckedUpdateWithoutCommentInput>
  }

  export type ResearcherUpdateWithoutCommentInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portofolio?: JurnalUpdateManyWithoutPortofolioNestedInput
    Project?: ProjectUpdateManyWithoutResearcherNestedInput
  }

  export type ResearcherUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portofolio?: JurnalUncheckedUpdateManyWithoutPortofolioNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutResearcherNestedInput
  }

  export type InvestorUpsertWithoutCommentInput = {
    update: XOR<InvestorUpdateWithoutCommentInput, InvestorUncheckedUpdateWithoutCommentInput>
    create: XOR<InvestorCreateWithoutCommentInput, InvestorUncheckedCreateWithoutCommentInput>
    where?: InvestorWhereInput
  }

  export type InvestorUpdateToOneWithWhereWithoutCommentInput = {
    where?: InvestorWhereInput
    data: XOR<InvestorUpdateWithoutCommentInput, InvestorUncheckedUpdateWithoutCommentInput>
  }

  export type InvestorUpdateWithoutCommentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Project?: ProjectUpdateManyWithoutInvestorNestedInput
    payment?: PaymentUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Project?: ProjectUncheckedUpdateManyWithoutInvestorNestedInput
    payment?: PaymentUncheckedUpdateManyWithoutInvestorNestedInput
  }

  export type ProjectUpsertWithWhereUniqueWithoutCommentInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutCommentInput, ProjectUncheckedUpdateWithoutCommentInput>
    create: XOR<ProjectCreateWithoutCommentInput, ProjectUncheckedCreateWithoutCommentInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutCommentInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutCommentInput, ProjectUncheckedUpdateWithoutCommentInput>
  }

  export type ProjectUpdateManyWithWhereWithoutCommentInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutCommentInput>
  }

  export type CommentCreateWithoutProjectInput = {
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcher?: ResearcherCreateNestedOneWithoutCommentInput
    investor?: InvestorCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutProjectInput = {
    id?: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
    investorId?: number | null
  }

  export type CommentCreateOrConnectWithoutProjectInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type ResearcherCreateWithoutProjectInput = {
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    portofolio?: JurnalCreateNestedManyWithoutPortofolioInput
    Comment?: CommentCreateNestedManyWithoutResearcherInput
  }

  export type ResearcherUncheckedCreateWithoutProjectInput = {
    id?: number
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    portofolio?: JurnalUncheckedCreateNestedManyWithoutPortofolioInput
    Comment?: CommentUncheckedCreateNestedManyWithoutResearcherInput
  }

  export type ResearcherCreateOrConnectWithoutProjectInput = {
    where: ResearcherWhereUniqueInput
    create: XOR<ResearcherCreateWithoutProjectInput, ResearcherUncheckedCreateWithoutProjectInput>
  }

  export type InvestorCreateWithoutProjectInput = {
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutInvestorInput
    payment?: PaymentCreateNestedManyWithoutInvestorInput
  }

  export type InvestorUncheckedCreateWithoutProjectInput = {
    id?: number
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutInvestorInput
    payment?: PaymentUncheckedCreateNestedManyWithoutInvestorInput
  }

  export type InvestorCreateOrConnectWithoutProjectInput = {
    where: InvestorWhereUniqueInput
    create: XOR<InvestorCreateWithoutProjectInput, InvestorUncheckedCreateWithoutProjectInput>
  }

  export type CommentUpsertWithoutProjectInput = {
    update: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutProjectInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
  }

  export type CommentUpdateWithoutProjectInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcher?: ResearcherUpdateOneWithoutCommentNestedInput
    investor?: InvestorUpdateOneWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ResearcherUpsertWithoutProjectInput = {
    update: XOR<ResearcherUpdateWithoutProjectInput, ResearcherUncheckedUpdateWithoutProjectInput>
    create: XOR<ResearcherCreateWithoutProjectInput, ResearcherUncheckedCreateWithoutProjectInput>
    where?: ResearcherWhereInput
  }

  export type ResearcherUpdateToOneWithWhereWithoutProjectInput = {
    where?: ResearcherWhereInput
    data: XOR<ResearcherUpdateWithoutProjectInput, ResearcherUncheckedUpdateWithoutProjectInput>
  }

  export type ResearcherUpdateWithoutProjectInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portofolio?: JurnalUpdateManyWithoutPortofolioNestedInput
    Comment?: CommentUpdateManyWithoutResearcherNestedInput
  }

  export type ResearcherUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portofolio?: JurnalUncheckedUpdateManyWithoutPortofolioNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutResearcherNestedInput
  }

  export type InvestorUpsertWithoutProjectInput = {
    update: XOR<InvestorUpdateWithoutProjectInput, InvestorUncheckedUpdateWithoutProjectInput>
    create: XOR<InvestorCreateWithoutProjectInput, InvestorUncheckedCreateWithoutProjectInput>
    where?: InvestorWhereInput
  }

  export type InvestorUpdateToOneWithWhereWithoutProjectInput = {
    where?: InvestorWhereInput
    data: XOR<InvestorUpdateWithoutProjectInput, InvestorUncheckedUpdateWithoutProjectInput>
  }

  export type InvestorUpdateWithoutProjectInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutInvestorNestedInput
    payment?: PaymentUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutInvestorNestedInput
    payment?: PaymentUncheckedUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorCreateWithoutPaymentInput = {
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutInvestorInput
    Project?: ProjectCreateNestedManyWithoutInvestorInput
  }

  export type InvestorUncheckedCreateWithoutPaymentInput = {
    id?: number
    email: string
    password: string
    firstname: string
    lastname: string
    budget: number
    profileImage: string
    institution: string
    range_member: string
    industry: string
    industry_type: string
    isPremium: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutInvestorInput
    Project?: ProjectUncheckedCreateNestedManyWithoutInvestorInput
  }

  export type InvestorCreateOrConnectWithoutPaymentInput = {
    where: InvestorWhereUniqueInput
    create: XOR<InvestorCreateWithoutPaymentInput, InvestorUncheckedCreateWithoutPaymentInput>
  }

  export type InvestorUpsertWithoutPaymentInput = {
    update: XOR<InvestorUpdateWithoutPaymentInput, InvestorUncheckedUpdateWithoutPaymentInput>
    create: XOR<InvestorCreateWithoutPaymentInput, InvestorUncheckedCreateWithoutPaymentInput>
    where?: InvestorWhereInput
  }

  export type InvestorUpdateToOneWithWhereWithoutPaymentInput = {
    where?: InvestorWhereInput
    data: XOR<InvestorUpdateWithoutPaymentInput, InvestorUncheckedUpdateWithoutPaymentInput>
  }

  export type InvestorUpdateWithoutPaymentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutInvestorNestedInput
    Project?: ProjectUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorUncheckedUpdateWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    range_member?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    industry_type?: StringFieldUpdateOperationsInput | string
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutInvestorNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutInvestorNestedInput
  }

  export type ResearcherCreateWithoutPortofolioInput = {
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutResearcherInput
    Project?: ProjectCreateNestedManyWithoutResearcherInput
  }

  export type ResearcherUncheckedCreateWithoutPortofolioInput = {
    id?: number
    firstname: string
    lastname: string
    education: string
    scope: string
    research: string
    institution: string
    profileImage: string
    email: string
    password: string
    background: string
    gender: string
    role: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutResearcherInput
    Project?: ProjectUncheckedCreateNestedManyWithoutResearcherInput
  }

  export type ResearcherCreateOrConnectWithoutPortofolioInput = {
    where: ResearcherWhereUniqueInput
    create: XOR<ResearcherCreateWithoutPortofolioInput, ResearcherUncheckedCreateWithoutPortofolioInput>
  }

  export type ResearcherUpsertWithWhereUniqueWithoutPortofolioInput = {
    where: ResearcherWhereUniqueInput
    update: XOR<ResearcherUpdateWithoutPortofolioInput, ResearcherUncheckedUpdateWithoutPortofolioInput>
    create: XOR<ResearcherCreateWithoutPortofolioInput, ResearcherUncheckedCreateWithoutPortofolioInput>
  }

  export type ResearcherUpdateWithWhereUniqueWithoutPortofolioInput = {
    where: ResearcherWhereUniqueInput
    data: XOR<ResearcherUpdateWithoutPortofolioInput, ResearcherUncheckedUpdateWithoutPortofolioInput>
  }

  export type ResearcherUpdateManyWithWhereWithoutPortofolioInput = {
    where: ResearcherScalarWhereInput
    data: XOR<ResearcherUpdateManyMutationInput, ResearcherUncheckedUpdateManyWithoutPortofolioInput>
  }

  export type ResearcherScalarWhereInput = {
    AND?: ResearcherScalarWhereInput | ResearcherScalarWhereInput[]
    OR?: ResearcherScalarWhereInput[]
    NOT?: ResearcherScalarWhereInput | ResearcherScalarWhereInput[]
    id?: IntFilter<"Researcher"> | number
    firstname?: StringFilter<"Researcher"> | string
    lastname?: StringFilter<"Researcher"> | string
    education?: StringFilter<"Researcher"> | string
    scope?: StringFilter<"Researcher"> | string
    research?: StringFilter<"Researcher"> | string
    institution?: StringFilter<"Researcher"> | string
    profileImage?: StringFilter<"Researcher"> | string
    email?: StringFilter<"Researcher"> | string
    password?: StringFilter<"Researcher"> | string
    background?: StringFilter<"Researcher"> | string
    gender?: StringFilter<"Researcher"> | string
    role?: StringFilter<"Researcher"> | string
    location?: StringFilter<"Researcher"> | string
    createdAt?: DateTimeFilter<"Researcher"> | Date | string
    updatedAt?: DateTimeFilter<"Researcher"> | Date | string
  }

  export type CommentCreateManyResearcherInput = {
    id?: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    investorId?: number | null
  }

  export type ProjectCreateManyResearcherInput = {
    id?: number
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    commentId?: number | null
    investorId?: number | null
  }

  export type JurnalUpdateWithoutPortofolioInput = {
    abstract?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type JurnalUncheckedUpdateWithoutPortofolioInput = {
    id?: IntFieldUpdateOperationsInput | number
    abstract?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type JurnalUncheckedUpdateManyWithoutPortofolioInput = {
    id?: IntFieldUpdateOperationsInput | number
    abstract?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentUpdateWithoutResearcherInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investor?: InvestorUpdateOneWithoutCommentNestedInput
    Project?: ProjectUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutResearcherInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
    Project?: ProjectUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutResearcherInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectUpdateWithoutResearcherInput = {
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: CommentUpdateOneWithoutProjectNestedInput
    investor?: InvestorUpdateOneWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutResearcherInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectUncheckedUpdateManyWithoutResearcherInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentCreateManyInvestorInput = {
    id?: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
  }

  export type ProjectCreateManyInvestorInput = {
    id?: number
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    commentId?: number | null
    researcherId?: number | null
  }

  export type PaymentCreateManyInvestorInput = {
    id?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    invoice: string
  }

  export type CommentUpdateWithoutInvestorInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcher?: ResearcherUpdateOneWithoutCommentNestedInput
    Project?: ProjectUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutInvestorInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    Project?: ProjectUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutInvestorInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectUpdateWithoutInvestorInput = {
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: CommentUpdateOneWithoutProjectNestedInput
    researcher?: ResearcherUpdateOneWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutInvestorInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectUncheckedUpdateManyWithoutInvestorInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PaymentUpdateWithoutInvestorInput = {
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    invoice?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentUncheckedUpdateWithoutInvestorInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    invoice?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentUncheckedUpdateManyWithoutInvestorInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    invoice?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateManyCommentInput = {
    id?: number
    project_name: string
    description_project: string
    project_image: string
    project_status: boolean
    starting_date: Date | string
    expected_finish_date: Date | string
    project_budget: number
    tags: string
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherId?: number | null
    investorId?: number | null
  }

  export type ProjectUpdateWithoutCommentInput = {
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcher?: ResearcherUpdateOneWithoutProjectNestedInput
    investor?: InvestorUpdateOneWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectUncheckedUpdateManyWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_name?: StringFieldUpdateOperationsInput | string
    description_project?: StringFieldUpdateOperationsInput | string
    project_image?: StringFieldUpdateOperationsInput | string
    project_status?: BoolFieldUpdateOperationsInput | boolean
    starting_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expected_finish_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_budget?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherId?: NullableIntFieldUpdateOperationsInput | number | null
    investorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ResearcherUpdateWithoutPortofolioInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutResearcherNestedInput
    Project?: ProjectUpdateManyWithoutResearcherNestedInput
  }

  export type ResearcherUncheckedUpdateWithoutPortofolioInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutResearcherNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutResearcherNestedInput
  }

  export type ResearcherUncheckedUpdateManyWithoutPortofolioInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    research?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ResearcherCountOutputTypeDefaultArgs instead
     */
    export type ResearcherCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResearcherCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvestorCountOutputTypeDefaultArgs instead
     */
    export type InvestorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvestorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentCountOutputTypeDefaultArgs instead
     */
    export type CommentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JurnalCountOutputTypeDefaultArgs instead
     */
    export type JurnalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JurnalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResearcherDefaultArgs instead
     */
    export type ResearcherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResearcherDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvestorDefaultArgs instead
     */
    export type InvestorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvestorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentDefaultArgs instead
     */
    export type PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JurnalDefaultArgs instead
     */
    export type JurnalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JurnalDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}